{
    "docs": [
        {
            "location": "/",
            "text": "Dino\n\n\nDino is a distributed notification service intended to push events to groups of clients. Example use cases are chat \nserver, real-time notifications for websites, push notifications for mobile apps, multi-player browser games, and more. \nDino is un-opinionated and any kind of events can be sent, meaning Dino only acts as the router of events between \nclients.\n\n\nAny number of nodes can be started on different machines or same machine on different port. Flask will handle connection\n routing using either Redis or RabbitMQ as a message queue internally. An nginx reverse proxy needs to sit in-front of\n all these nodes with sticky sessions (\nip_hash\n). Fail-over can be configured in nginx for high availability.",
            "title": "Home"
        },
        {
            "location": "/#dino",
            "text": "Dino is a distributed notification service intended to push events to groups of clients. Example use cases are chat \nserver, real-time notifications for websites, push notifications for mobile apps, multi-player browser games, and more. \nDino is un-opinionated and any kind of events can be sent, meaning Dino only acts as the router of events between \nclients.  Any number of nodes can be started on different machines or same machine on different port. Flask will handle connection\n routing using either Redis or RabbitMQ as a message queue internally. An nginx reverse proxy needs to sit in-front of\n all these nodes with sticky sessions ( ip_hash ). Fail-over can be configured in nginx for high availability.",
            "title": "Dino"
        },
        {
            "location": "/md/installation/",
            "text": "Requirements\n\n\nSome package requirements (debian/ubuntu):\n\n\n$ sudo apt-get update\n$ sudo apt-get install tar git curl nano wget dialog net-tools build-essential\n$ sudo apt-get install libssl-dev libmysqlclient-dev libpq-dev virtualenv\n\n\n\nFrom source\n\n\nRequires Python >=3.5.0. Download and install from source (tip: install in \n/opt\n since it might interfere with other\npython installations, present or future):\n\n\n$ wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tar.xz\n$ tar -xvf Python-3.5.4.tar.xz\n$ cd Python-3.5.4/\n$ sudo mkdir /opt/python-3.5.4\n$ ./configure --prefix=/opt/python-3.5.4 --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\" --enable-optimizations\n$ make\n$ sudo make altinstall\n\n\n\nAdd the paths to your \n.bashrc\n or \n.profile\n:\n\n\nexport PATH=\"/opt/python-3.5.4/bin/:$PATH\"\nexport LD_LIBRARY_PATH=\"/opt/python-3.5.4/lib/:$LD_LIBRARY_PATH\"\n\n\n\nInstall requirements:\n\n\n$ source env/bin/activate\n(env) $ pip install -r requirements.txt\n\n\n\nUsing MiniConda\n\n\nInstall \nminiconda\n:\n\n\n$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n$ bash Miniconda3-latest-Linux-x86_64.sh # assuming defaults accepted\n$ source ~/.bashrc\n\n\n\nCreate your environment and install the requirements:\n\n\n$ conda create -n env python=3.5\n$ source activate env\n$ pip install -r requirements.txt\n\n\n\nOther requirements\n\n\nIf you're using redis, postgresql/mysql and/or cassandra, please see relevant documentation for how to install:\n\n\n\n\nRedis\n\n\nPostgreSQL\n\n\nMySQL\n\n\nApache Cassandra\n\n\n\n\nInstalling\n\n\nThere are a few choices included for how to install Dino.\n\n\nSimple\n\n\nJust clone and run from the cloned directory:\n\n\n$ git clone https://github.com/thenetcircle/dino.git\n$ cd dino\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .\n\n\n\nUsing init script\n\n\n$ git clone https://github.com/thenetcircle/dino.git foobar-prod\n$ cd foobar-prod\n$ virtualenv --python=python3.5 env\n$ sudo cp bin/initd/dino-app /etc/init.d/\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .\n\n\n\nMake sure to update the init script to use the correct paths.\n\n\nUsing the supplied install script\n\n\nThe install script will copy the systemd files to  \n/usr/lib/systemd/system/\n, one for each service/environment you \ninstall for.\n\n\n$ pwd\n/home/dino\n$ git clone https://github.com/thenetcircle/dino.git foobar-prod\n$ cd foobar-prod\n$ virtualenv --python=python3.5 env\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod app 5200\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod rest 5400\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod web 5300\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .\n\n\n\nClustering\n\n\nIf clustering dino, install a reverse proxy that supports websockets, e.g. nginx (>= 1.4). Here's an example configuration:\n\n\nupstream gridnodes {\n    ip_hash;\n\n    server some-ip-or-host-1:5210;\n    server some-ip-or-host-2:5210;\n    server some-ip-or-host-3:5210;\n    server some-ip-or-host-4:5210;\n    server some-ip-or-host-5:5210;\n    server some-ip-or-host-6:5210;\n    server some-ip-or-host-7:5210;\n    server some-ip-or-host-8:5210;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 5200;\n\n    location / {\n        access_log on;\n\n        proxy_pass http://gridnodes;\n        proxy_next_upstream error timeout invalid_header http_500;\n        proxy_connect_timeout 2;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n\n\n\nRunning the application\n\n\nA few examples are included for running Dino: running in the foreground, using systemd and the deploy script, docker and\nlastly kubernetes.\n\n\nSimple\n\n\nRunning in the foreground:\n\n\n$ cd dino/\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ DINO_ENVIRONMENT=dev gunicorn \\\n            --error-logfile ~/dino-gunicorn-error.log \\\n            --log-file ~/dino-gunicorn.log \\\n            --worker-class eventlet \\\n            --threads 1 \\\n            --worker-connections 5000 \\\n            --workers 1 \\\n            --bind 0.0.0.0:5210 \\\n            app:app\n\n\n\nTo run the rest API and admin interface use the same command but change \napp:app\n to \nrest:app\n and \nweb:app\n \nrespectively.\n\n\nUsing the deploy script\n\n\nThe simple deployment script included pulls from git master, shuts down services, clears online tables then starts\neverything up again. The script assumes the base directory where the project is checked out has the same name as the\n\nenvironment\n. The deployment script also assumes you're running with \nsystemd\n and have used the installation script\nto first install Dino. The deployment script will deploy for all services that are installed for the environment, so if\nyou've only installed the \napp\n and \nrest\n service but not the \nweb\n service, then only the \napp\n and \nrest\n service \nwill be re-deployed.\n\n\nSo if you're environment is called \nfoobar-prod\n:\n\n\n$ cd /home/dino/foobar-prod\n$ DINO_ENVIRONMENT=foobar-prod DINO_HOME=/home/dino/foobar-prod ./bin/deploy-simple.sh \nstarting deployment...\npulling from git... \nAlready up-to-date.\nstopping web... \nstopping rest... \nstopping app... \nclearing online cache... \nclearing online db tables... \nstarting app... \nstarting rest... \nstarting web... \ndeployment done!\n\n\n\nRunning in Docker\n\n\nFirst create the image:\n\n\nsudo docker build -t dino .\n\n\n\nThen we can run it (create an environments file in secrets/ for your chosen environment (dev/prod/etc), e.g. \n\nsecrets/dev.env\n. Check the \nsecrets/default.env\n for an example. Then we can run the image:\n\n\nsudo docker run --env-file=secrets/dev.env --env DINO_PORT=5120 -t dino\n\n\n\nNote that we didn't put the port in the \ndev.env\n file (though we could), because if starting multiple dino nodes they\nneed to use different ports.\n\n\nRunning in Kubernetes\n\n\nFor running in Kubernetes we need to use Kubernetes \nSecrets\n instead of the \n.env\n files. Example configuration for \nsome secret values for your pod:\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-env-pod\nspec:\n  containers:\n    - name: mycontainer\n      image: redis\n      env:\n        - name: DINO_DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-host\n        - name: DINO_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-user\n  restartPolicy: Never\n\n\n\nRead more on Kubernetes website on \nhow to create the secrets object\n \nand then how to \nconfigure your pod to use it\n.\n\n\nMonitoring\n\n\nDino can be extensively monitored by configuring a \nstatsd\n endpoint. In \ndino.yaml\n you can either choose \nmock\n to disable metrics:\n\n\nstats:\n  type: 'statsd'\n  host: 'mock'\n\n\n\nOr choose \nstatsd\n with a host and port to publish all metrics to a \nstatsd\n host, for example like this:\n\n\nstats:\n  type: 'statsd'\n  host: '$DINO_STATSD_HOST'\n  port: 8125\n  prefix: 'dino.myapp'\n  include_hostname: 'true'\n\n\n\nIf you choose \ntrue\n for \ninclude_hostname\n (good when running multiple nodes on different physical machines, in this example\nit's \nskybox-04\n) then the value of \nimport socket; socket.gethostname()\n will be added \nafter\n the value supplied for \nprefix\n.\nSo in the example above, when the mean timer value of the metric for how long time the api action \non_login\n takes would be:\n\n\ndino.myapp.skybox-04.event.on_login.timer.mean\n\n\n\nAn already configured solution for \nstatsd\n with \ninfluxdb\n and the \ngrafana\n frontend exists with\n\nthe following docker image\n:\n\n\ndocker run -d \\\n  --name grafana \\\n  -p 3003:9000 \\\n  -p 3004:8083 \\\n  -p 8086:8086 \\\n  -p 22022:22 \\\n  -p 8125:8125/udp \\\n  advantageous/grafana:latest:latest\n\n\n\nAnd configure the \nstatsd\n host to the IP you run the docker image on, and the port \n8125\n. Example of enabling this \nstatsd\n\nhost with this docker image running:\n\n\n\n\nBuilding the documentation\n\n\nViewing locally:\n\n\n$ mkdocs serve\n\n\n\nBuilding the site (not necessary):\n\n\n$ mkdocs build\n\n\n\nDeploy to gihub pages:\n\n\n$ mkdocs gh-deploy",
            "title": "Installation"
        },
        {
            "location": "/md/installation/#requirements",
            "text": "Some package requirements (debian/ubuntu):  $ sudo apt-get update\n$ sudo apt-get install tar git curl nano wget dialog net-tools build-essential\n$ sudo apt-get install libssl-dev libmysqlclient-dev libpq-dev virtualenv",
            "title": "Requirements"
        },
        {
            "location": "/md/installation/#from-source",
            "text": "Requires Python >=3.5.0. Download and install from source (tip: install in  /opt  since it might interfere with other\npython installations, present or future):  $ wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tar.xz\n$ tar -xvf Python-3.5.4.tar.xz\n$ cd Python-3.5.4/\n$ sudo mkdir /opt/python-3.5.4\n$ ./configure --prefix=/opt/python-3.5.4 --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\" --enable-optimizations\n$ make\n$ sudo make altinstall  Add the paths to your  .bashrc  or  .profile :  export PATH=\"/opt/python-3.5.4/bin/:$PATH\"\nexport LD_LIBRARY_PATH=\"/opt/python-3.5.4/lib/:$LD_LIBRARY_PATH\"  Install requirements:  $ source env/bin/activate\n(env) $ pip install -r requirements.txt",
            "title": "From source"
        },
        {
            "location": "/md/installation/#using-miniconda",
            "text": "Install  miniconda :  $ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n$ bash Miniconda3-latest-Linux-x86_64.sh # assuming defaults accepted\n$ source ~/.bashrc  Create your environment and install the requirements:  $ conda create -n env python=3.5\n$ source activate env\n$ pip install -r requirements.txt",
            "title": "Using MiniConda"
        },
        {
            "location": "/md/installation/#other-requirements",
            "text": "If you're using redis, postgresql/mysql and/or cassandra, please see relevant documentation for how to install:   Redis  PostgreSQL  MySQL  Apache Cassandra",
            "title": "Other requirements"
        },
        {
            "location": "/md/installation/#installing",
            "text": "There are a few choices included for how to install Dino.",
            "title": "Installing"
        },
        {
            "location": "/md/installation/#simple",
            "text": "Just clone and run from the cloned directory:  $ git clone https://github.com/thenetcircle/dino.git\n$ cd dino\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .",
            "title": "Simple"
        },
        {
            "location": "/md/installation/#using-init-script",
            "text": "$ git clone https://github.com/thenetcircle/dino.git foobar-prod\n$ cd foobar-prod\n$ virtualenv --python=python3.5 env\n$ sudo cp bin/initd/dino-app /etc/init.d/\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .  Make sure to update the init script to use the correct paths.",
            "title": "Using init script"
        },
        {
            "location": "/md/installation/#using-the-supplied-install-script",
            "text": "The install script will copy the systemd files to   /usr/lib/systemd/system/ , one for each service/environment you \ninstall for.  $ pwd\n/home/dino\n$ git clone https://github.com/thenetcircle/dino.git foobar-prod\n$ cd foobar-prod\n$ virtualenv --python=python3.5 env\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod app 5200\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod rest 5400\n$ sudo ./bin/install.sh foobar-prod /home/dino/foobar-prod web 5300\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .",
            "title": "Using the supplied install script"
        },
        {
            "location": "/md/installation/#clustering",
            "text": "If clustering dino, install a reverse proxy that supports websockets, e.g. nginx (>= 1.4). Here's an example configuration:  upstream gridnodes {\n    ip_hash;\n\n    server some-ip-or-host-1:5210;\n    server some-ip-or-host-2:5210;\n    server some-ip-or-host-3:5210;\n    server some-ip-or-host-4:5210;\n    server some-ip-or-host-5:5210;\n    server some-ip-or-host-6:5210;\n    server some-ip-or-host-7:5210;\n    server some-ip-or-host-8:5210;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 5200;\n\n    location / {\n        access_log on;\n\n        proxy_pass http://gridnodes;\n        proxy_next_upstream error timeout invalid_header http_500;\n        proxy_connect_timeout 2;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}",
            "title": "Clustering"
        },
        {
            "location": "/md/installation/#running-the-application",
            "text": "A few examples are included for running Dino: running in the foreground, using systemd and the deploy script, docker and\nlastly kubernetes.",
            "title": "Running the application"
        },
        {
            "location": "/md/installation/#simple_1",
            "text": "Running in the foreground:  $ cd dino/\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ DINO_ENVIRONMENT=dev gunicorn \\\n            --error-logfile ~/dino-gunicorn-error.log \\\n            --log-file ~/dino-gunicorn.log \\\n            --worker-class eventlet \\\n            --threads 1 \\\n            --worker-connections 5000 \\\n            --workers 1 \\\n            --bind 0.0.0.0:5210 \\\n            app:app  To run the rest API and admin interface use the same command but change  app:app  to  rest:app  and  web:app  \nrespectively.",
            "title": "Simple"
        },
        {
            "location": "/md/installation/#using-the-deploy-script",
            "text": "The simple deployment script included pulls from git master, shuts down services, clears online tables then starts\neverything up again. The script assumes the base directory where the project is checked out has the same name as the environment . The deployment script also assumes you're running with  systemd  and have used the installation script\nto first install Dino. The deployment script will deploy for all services that are installed for the environment, so if\nyou've only installed the  app  and  rest  service but not the  web  service, then only the  app  and  rest  service \nwill be re-deployed.  So if you're environment is called  foobar-prod :  $ cd /home/dino/foobar-prod\n$ DINO_ENVIRONMENT=foobar-prod DINO_HOME=/home/dino/foobar-prod ./bin/deploy-simple.sh \nstarting deployment...\npulling from git... \nAlready up-to-date.\nstopping web... \nstopping rest... \nstopping app... \nclearing online cache... \nclearing online db tables... \nstarting app... \nstarting rest... \nstarting web... \ndeployment done!",
            "title": "Using the deploy script"
        },
        {
            "location": "/md/installation/#running-in-docker",
            "text": "First create the image:  sudo docker build -t dino .  Then we can run it (create an environments file in secrets/ for your chosen environment (dev/prod/etc), e.g.  secrets/dev.env . Check the  secrets/default.env  for an example. Then we can run the image:  sudo docker run --env-file=secrets/dev.env --env DINO_PORT=5120 -t dino  Note that we didn't put the port in the  dev.env  file (though we could), because if starting multiple dino nodes they\nneed to use different ports.",
            "title": "Running in Docker"
        },
        {
            "location": "/md/installation/#running-in-kubernetes",
            "text": "For running in Kubernetes we need to use Kubernetes  Secrets  instead of the  .env  files. Example configuration for \nsome secret values for your pod:  apiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-env-pod\nspec:\n  containers:\n    - name: mycontainer\n      image: redis\n      env:\n        - name: DINO_DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-host\n        - name: DINO_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-user\n  restartPolicy: Never  Read more on Kubernetes website on  how to create the secrets object  \nand then how to  configure your pod to use it .",
            "title": "Running in Kubernetes"
        },
        {
            "location": "/md/installation/#monitoring",
            "text": "Dino can be extensively monitored by configuring a  statsd  endpoint. In  dino.yaml  you can either choose  mock  to disable metrics:  stats:\n  type: 'statsd'\n  host: 'mock'  Or choose  statsd  with a host and port to publish all metrics to a  statsd  host, for example like this:  stats:\n  type: 'statsd'\n  host: '$DINO_STATSD_HOST'\n  port: 8125\n  prefix: 'dino.myapp'\n  include_hostname: 'true'  If you choose  true  for  include_hostname  (good when running multiple nodes on different physical machines, in this example\nit's  skybox-04 ) then the value of  import socket; socket.gethostname()  will be added  after  the value supplied for  prefix .\nSo in the example above, when the mean timer value of the metric for how long time the api action  on_login  takes would be:  dino.myapp.skybox-04.event.on_login.timer.mean  An already configured solution for  statsd  with  influxdb  and the  grafana  frontend exists with the following docker image :  docker run -d \\\n  --name grafana \\\n  -p 3003:9000 \\\n  -p 3004:8083 \\\n  -p 8086:8086 \\\n  -p 22022:22 \\\n  -p 8125:8125/udp \\\n  advantageous/grafana:latest:latest  And configure the  statsd  host to the IP you run the docker image on, and the port  8125 . Example of enabling this  statsd \nhost with this docker image running:",
            "title": "Monitoring"
        },
        {
            "location": "/md/installation/#building-the-documentation",
            "text": "Viewing locally:  $ mkdocs serve  Building the site (not necessary):  $ mkdocs build  Deploy to gihub pages:  $ mkdocs gh-deploy",
            "title": "Building the documentation"
        },
        {
            "location": "/md/getting_started/",
            "text": "Quick start\n\n\nThis example is using JavaScript.\n\n\nFirst we connect to the server:\n\n\nsocket = io.connect(\n    'http://' + document.domain + ':' + location.port + '/chat', \n    {transports:['websocket']}\n);\n\n\n\n\nWe'll receive a \nconnect\n event back after successfully connecting. Now we have to send the \nlogin\n event to provide the\nserver with some extra user information and to do authentication:\n\n\nsocket.on('connect', function() {\n    socket.emit('login', {\n        verb: 'login',\n        actor: {\n            id: '<user ID>',\n            attachments: [\n                {\n                    objectType: 'token',\n                    content: '<auth token>'\n                }\n            ]\n        }\n    });\n});\n\n\n\n\nAll events sent to the server will get a response with the same name plus a prefix of \ngn_\n. For example, the login \nevent sent above will get the following response, \ngn_login\n, meaning we've successfully authenticated with the server.\nNow we can start joining rooms, chatting, sending events etc.\n\n\nsocket.on('gn_login', function(response) {\n    socket.emit('list_channels', {\n        verb: 'list'\n    });\n});\n\n\n\n\nThe response from the server will be in JSON format. If no data is expected for the events, only a status code will be\nin the response. For example, sending the \njoin\n event to join a room won't return any data, but only the following\n(if successful):\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nFailure to execute an event on the server will return an \nerror code\n:\n\n\n{\n    \"status_code\": 423,\n    \"data\": \"<an error message, always a string>\"\n}\n\n\n\n\nIf an internal server error occurs, code 500 is returned:\n\n\n{\n    \"status_code\": 500,\n    \"data\": \"<an error message, always a string>\"\n}\n\n\n\n\nThe format of the response can be configured, e.g. to return key \"error\" for error messages and use \"data\" only for json\ndata.\n\n\nFor events that contains data in the response, for example when sending the event \nlist_channels\n, we expect to get a list\nof channels in the response. For these events the data part is always a JSON in the ActivityStreams 1.0 format:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {       \n        \"object\": {\n            \"objectType\": \"channels\"\n            \"attachments\": [\n                {\n                    \"id\": \"<channel ID 1>\",\n                    \"content\": \"<channel name 1 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 2>\",\n                    \"content\": \"<channel name 2 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 3>\",\n                    \"content\": \"<channel name 3 in base64>\"\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\n\nEncoding\n\n\nAll user names, room names, channel names and chat messages are expected to be base64 encoded unicode strings. All\nresponses and events originating from the server will also follow this practice, so when listing rooms/channels/users\nall names will always be in base64.\n\n\nAuthentication\n\n\nIf the \nredis\n authentication method is configured, then when clients send the \nlogin\n event to the server, the\nsupplied \ntoken\n and \nactor.id\n parameter must already exist in Redis. When the server gets the login event it will\ncheck if the token matches the one stored in Redis for this user ID, otherwise it will not authenticate the session.\n\n\nTherefor, before a client can login, these two values (and any other possible values used for permissions) needs to\nfirst be set in the Redis \nhset\n with key \nuser:auth:<user ID>\n.\n\n\nExample:\n\n\n$ redis-cli\n127.0.0.1:6379> hset user:auth:1234 token 302fe6be-a72f-11e6-b5fc-330653beb4be\n127.0.0.1:6379> hset user:auth:1234 age 35\n127.0.0.1:6379> hset user:auth:1234 gender m\n\n\n\nPrivate messaging\n\n\nSometimes private messaging should be identified by the unique combination of two user IDs, say \n1\n and \n2\n, so\nthat the history between them can be accesses by both parties. In this case, the client implementation should\ngenerate an identifiable \"name\" for this combination, and create a room to group these messages in. \n\n\nFor example, the implementer generates a \nthread_id\n or \nconversation_id\n on their side, then call the\n\ncreate\n API with the name set as this generated ID. For example, if the ID \n42\n is generated \nfor the conversation assiciated with the users \n1\n and \n2\n:\n\n\nsocket.emit('create', {\n    verb: 'create'\n    object: {\n        url: '<channel uuid>'\n    },\n    target: {\n        displayName: '42',\n        objectType: 'private',\n        attachments: [{\n            objectType: 'owners',\n            summary: '1,2'\n        }]\n    }\n}, function(status_code, data, error_msg) {\n    // callback method, check create api for format of the data param\n});\n\n\n\n\nThe callback method will contain the generated UUID of this room (e,g, \n4b90eae8-c82b-11e7-98ba-43d525dbbb29\n), \nwhich should be used when joining, sending message etc. It is the responsibility of the implementer to keep track \nof the room IDs associated with conversations.\n\n\nAll users specied as the \"owners\" will receive the \ngn_room_created\n event if \nthey are online, otherwise they would get it as history later.\n\n\nTo send a message in this \nroom\n, first \njoin\n the room (will return the history of this room):\n\n\nsocket.emit('join', {\n    verb: 'join',\n    target: {\n        id: '4b90eae8-c82b-11e7-98ba-43d525dbbb29'\n    }\n}, function(status_code, data, error_msg) {\n    // callback method\n});\n\n\n\n\nAlternatively, a room can be joined by the \ndisplay_name\n instead of by \nid\n, in case that the UUID is not known\non the client side a the time of joining. If multiple rooms exists with the same \ndisplay_name\n, the \njoin\n event \nwill fail with the \nerror code 715\n, though in reality that should not happen unless the\nuniqueness of room names per channel during creation has been disabled. \n\n\nExample of joining using \ndisplay_name\n:\n\n\nsocket.emit('join', {\n    verb: 'join',\n    target: {\n        display_name: '42'\n    }   \n}, function(status_code, data, error_msg) {\n    // callback method, generated room uuid is data.target.id\n});\n\n\n\n\nUse the \nmessage\n API to send a message to this room:\n\n\nsocket.emit('message', {\n    verb: 'send',\n    target: {\n        id: '4b90eae8-c82b-11e7-98ba-43d525dbbb29',\n    },\n    object: {\n        content: '<the message, base64 encoded>',\n    }\n}, function(status_code, data, error_msg) {\n    // callback method\n});\n\n\n\n\nIf the other user is online, he/she will get the \nmessage received\n event.\n\n\nJava client\n\n\nUsing the \nJava socket.io library\n, you have to use \nhttp\n \ninstead of \nws\n and \nhttps\n instead of \nwss\n (it's the same thing).\n\n\nCreate your object and use Gson to serialize it to json for a JSONObject (you cannot do a \ntoString\n of the \nobejct, it needs to be a json object):\n\n\nGson gson = new Gson();\ntry {\n    JSONObject obj = new JSONObject(gson.toJson(o));\n    s.emit(\"login\", obj);\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n\n\n\n\nDelivery acknowledgment\n\n\nAll APIs will invoke the callback (if specified) with a \nstatus_code\n and possibly \nerror_message\n (if any \nerrors). These should be be retrieved in the callback defined on the client side. If there was no error, the\n\nsecond argument will be nil. Examples of callbacks on client side in JavaScript:\n\n\nsocket.emit('message', '<omitted json message>', function(status_code, error_msg) {\n    // do something\n});  \n\n\n\n\nMessages should also be awknowledged by the client when \nreceived\n. An awknowledgement can also \nbe sent by the client when a messages as been \nread\n, to let other clients know if the message has \nbeen seen or not.\n\n\nUnawknowledged (no received ack sent by client) messages will in future version be redelivered since it might\nindicate a loss during transmission.\n\n\nExample of sending acknowledgement of received message as well as listening for the \nOK\n server response to\nthe ack:\n\n\nsocket.on('gn_message', function(response) {\n    if (response.status_code !== 200) {\n        // handle error some way\n        return;\n    }\n\n    // acknowledge that we got the message\n    socket.emit('received', {\n        verb: 'receive',\n        target: {\n            id: room_id\n        },\n        object: {\n            attachments: [{\n                // response.data.id is the generated uuid of the message, see api docs\n                id: response.data.id\n            }]\n        }\n    }, function(status_code, error_msg) {\n        // server \"acks our ack\"\n        console.log('callback for received api: ' + status_code)\n    });\n\n    // finally handle the message\n    handle_message(data);\n});\n\n\n\n\nLimited sessions\n\n\nThe session handler can be configured to either allow only one simultaneous connection per user or\nan unlimited amount. If only one session is allowed, then whenever a new session by the same user\nis started, the previous connection will be disconnected.",
            "title": "Getting Started"
        },
        {
            "location": "/md/getting_started/#quick-start",
            "text": "This example is using JavaScript.  First we connect to the server:  socket = io.connect(\n    'http://' + document.domain + ':' + location.port + '/chat', \n    {transports:['websocket']}\n);  We'll receive a  connect  event back after successfully connecting. Now we have to send the  login  event to provide the\nserver with some extra user information and to do authentication:  socket.on('connect', function() {\n    socket.emit('login', {\n        verb: 'login',\n        actor: {\n            id: '<user ID>',\n            attachments: [\n                {\n                    objectType: 'token',\n                    content: '<auth token>'\n                }\n            ]\n        }\n    });\n});  All events sent to the server will get a response with the same name plus a prefix of  gn_ . For example, the login \nevent sent above will get the following response,  gn_login , meaning we've successfully authenticated with the server.\nNow we can start joining rooms, chatting, sending events etc.  socket.on('gn_login', function(response) {\n    socket.emit('list_channels', {\n        verb: 'list'\n    });\n});  The response from the server will be in JSON format. If no data is expected for the events, only a status code will be\nin the response. For example, sending the  join  event to join a room won't return any data, but only the following\n(if successful):  {\n    \"status_code\": 200\n}  Failure to execute an event on the server will return an  error code :  {\n    \"status_code\": 423,\n    \"data\": \"<an error message, always a string>\"\n}  If an internal server error occurs, code 500 is returned:  {\n    \"status_code\": 500,\n    \"data\": \"<an error message, always a string>\"\n}  The format of the response can be configured, e.g. to return key \"error\" for error messages and use \"data\" only for json\ndata.  For events that contains data in the response, for example when sending the event  list_channels , we expect to get a list\nof channels in the response. For these events the data part is always a JSON in the ActivityStreams 1.0 format:  {\n    \"status_code\": 200,\n    \"data\": {       \n        \"object\": {\n            \"objectType\": \"channels\"\n            \"attachments\": [\n                {\n                    \"id\": \"<channel ID 1>\",\n                    \"content\": \"<channel name 1 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 2>\",\n                    \"content\": \"<channel name 2 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 3>\",\n                    \"content\": \"<channel name 3 in base64>\"\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}",
            "title": "Quick start"
        },
        {
            "location": "/md/getting_started/#encoding",
            "text": "All user names, room names, channel names and chat messages are expected to be base64 encoded unicode strings. All\nresponses and events originating from the server will also follow this practice, so when listing rooms/channels/users\nall names will always be in base64.",
            "title": "Encoding"
        },
        {
            "location": "/md/getting_started/#authentication",
            "text": "If the  redis  authentication method is configured, then when clients send the  login  event to the server, the\nsupplied  token  and  actor.id  parameter must already exist in Redis. When the server gets the login event it will\ncheck if the token matches the one stored in Redis for this user ID, otherwise it will not authenticate the session.  Therefor, before a client can login, these two values (and any other possible values used for permissions) needs to\nfirst be set in the Redis  hset  with key  user:auth:<user ID> .  Example:  $ redis-cli\n127.0.0.1:6379> hset user:auth:1234 token 302fe6be-a72f-11e6-b5fc-330653beb4be\n127.0.0.1:6379> hset user:auth:1234 age 35\n127.0.0.1:6379> hset user:auth:1234 gender m",
            "title": "Authentication"
        },
        {
            "location": "/md/getting_started/#private-messaging",
            "text": "Sometimes private messaging should be identified by the unique combination of two user IDs, say  1  and  2 , so\nthat the history between them can be accesses by both parties. In this case, the client implementation should\ngenerate an identifiable \"name\" for this combination, and create a room to group these messages in.   For example, the implementer generates a  thread_id  or  conversation_id  on their side, then call the create  API with the name set as this generated ID. For example, if the ID  42  is generated \nfor the conversation assiciated with the users  1  and  2 :  socket.emit('create', {\n    verb: 'create'\n    object: {\n        url: '<channel uuid>'\n    },\n    target: {\n        displayName: '42',\n        objectType: 'private',\n        attachments: [{\n            objectType: 'owners',\n            summary: '1,2'\n        }]\n    }\n}, function(status_code, data, error_msg) {\n    // callback method, check create api for format of the data param\n});  The callback method will contain the generated UUID of this room (e,g,  4b90eae8-c82b-11e7-98ba-43d525dbbb29 ), \nwhich should be used when joining, sending message etc. It is the responsibility of the implementer to keep track \nof the room IDs associated with conversations.  All users specied as the \"owners\" will receive the  gn_room_created  event if \nthey are online, otherwise they would get it as history later.  To send a message in this  room , first  join  the room (will return the history of this room):  socket.emit('join', {\n    verb: 'join',\n    target: {\n        id: '4b90eae8-c82b-11e7-98ba-43d525dbbb29'\n    }\n}, function(status_code, data, error_msg) {\n    // callback method\n});  Alternatively, a room can be joined by the  display_name  instead of by  id , in case that the UUID is not known\non the client side a the time of joining. If multiple rooms exists with the same  display_name , the  join  event \nwill fail with the  error code 715 , though in reality that should not happen unless the\nuniqueness of room names per channel during creation has been disabled.   Example of joining using  display_name :  socket.emit('join', {\n    verb: 'join',\n    target: {\n        display_name: '42'\n    }   \n}, function(status_code, data, error_msg) {\n    // callback method, generated room uuid is data.target.id\n});  Use the  message  API to send a message to this room:  socket.emit('message', {\n    verb: 'send',\n    target: {\n        id: '4b90eae8-c82b-11e7-98ba-43d525dbbb29',\n    },\n    object: {\n        content: '<the message, base64 encoded>',\n    }\n}, function(status_code, data, error_msg) {\n    // callback method\n});  If the other user is online, he/she will get the  message received  event.",
            "title": "Private messaging"
        },
        {
            "location": "/md/getting_started/#java-client",
            "text": "Using the  Java socket.io library , you have to use  http  \ninstead of  ws  and  https  instead of  wss  (it's the same thing).  Create your object and use Gson to serialize it to json for a JSONObject (you cannot do a  toString  of the \nobejct, it needs to be a json object):  Gson gson = new Gson();\ntry {\n    JSONObject obj = new JSONObject(gson.toJson(o));\n    s.emit(\"login\", obj);\n} catch (JSONException e) {\n    e.printStackTrace();\n}",
            "title": "Java client"
        },
        {
            "location": "/md/getting_started/#delivery-acknowledgment",
            "text": "All APIs will invoke the callback (if specified) with a  status_code  and possibly  error_message  (if any \nerrors). These should be be retrieved in the callback defined on the client side. If there was no error, the \nsecond argument will be nil. Examples of callbacks on client side in JavaScript:  socket.emit('message', '<omitted json message>', function(status_code, error_msg) {\n    // do something\n});    Messages should also be awknowledged by the client when  received . An awknowledgement can also \nbe sent by the client when a messages as been  read , to let other clients know if the message has \nbeen seen or not.  Unawknowledged (no received ack sent by client) messages will in future version be redelivered since it might\nindicate a loss during transmission.  Example of sending acknowledgement of received message as well as listening for the  OK  server response to\nthe ack:  socket.on('gn_message', function(response) {\n    if (response.status_code !== 200) {\n        // handle error some way\n        return;\n    }\n\n    // acknowledge that we got the message\n    socket.emit('received', {\n        verb: 'receive',\n        target: {\n            id: room_id\n        },\n        object: {\n            attachments: [{\n                // response.data.id is the generated uuid of the message, see api docs\n                id: response.data.id\n            }]\n        }\n    }, function(status_code, error_msg) {\n        // server \"acks our ack\"\n        console.log('callback for received api: ' + status_code)\n    });\n\n    // finally handle the message\n    handle_message(data);\n});",
            "title": "Delivery acknowledgment"
        },
        {
            "location": "/md/getting_started/#limited-sessions",
            "text": "The session handler can be configured to either allow only one simultaneous connection per user or\nan unlimited amount. If only one session is allowed, then whenever a new session by the same user\nis started, the previous connection will be disconnected.",
            "title": "Limited sessions"
        },
        {
            "location": "/md/usage/",
            "text": "Kicking a user\n\n\nWhen a user is kicked from a room (from api/web/rest), all messages that user has sent in a room will be deleted.\n\n\nEvery user in the room will receive an event called \ngn_user_kicked\n with a possible free-text reason field set.\n\n\nBanning a user\n\n\nWhen a user is banned (from api/web/rest), all messages that user has ever sent in any room will be deleted.\n\n\nTODO: who receives what event?",
            "title": "Usage"
        },
        {
            "location": "/md/usage/#kicking-a-user",
            "text": "When a user is kicked from a room (from api/web/rest), all messages that user has sent in a room will be deleted.  Every user in the room will receive an event called  gn_user_kicked  with a possible free-text reason field set.",
            "title": "Kicking a user"
        },
        {
            "location": "/md/usage/#banning-a-user",
            "text": "When a user is banned (from api/web/rest), all messages that user has ever sent in any room will be deleted.  TODO: who receives what event?",
            "title": "Banning a user"
        },
        {
            "location": "/md/api/",
            "text": "Error Codes\n\n\nOK = 200\nUNKNOWN_ERROR = 250\n\nMISSING_ACTOR_ID = 500\nMISSING_OBJECT_ID = 501\nMISSING_TARGET_ID = 502\nMISSING_OBJECT_URL = 503\nMISSING_TARGET_DISPLAY_NAME = 504\nMISSING_ACTOR_URL = 505\nMISSING_OBJECT_CONTENT = 506\nMISSING_OBJECT = 507\nMISSING_OBJECT_ATTACHMENTS = 508\nMISSING_ATTACHMENT_TYPE = 509\nMISSING_ATTACHMENT_CONTENT = 510\n\nINVALID_TARGET_TYPE = 600\nINVALID_ACL_TYPE = 601\nINVALID_ACL_ACTION = 602\nINVALID_ACL_VALUE = 603\nINVALID_STATUS = 604\nINVALID_OBJECT_TYPE = 605\nINVALID_BAN_DURATION = 606\n\nEMPTY_MESSAGE = 700\nNOT_BASE64 = 701\nUSER_NOT_IN_ROOM = 702\nUSER_IS_BANNED = 703\nROOM_ALREADY_EXISTS = 704\nNOT_ALLOWED = 705\nVALIDATION_ERROR = 706\nROOM_FULL = 707\nNOT_ONLINE = 708\nTOO_MANY_PRIVATE_ROOMS = 709\nROOM_NAME_TOO_LONG = 710\nROOM_NAME_TOO_SHORT = 711\nINVALID_TOKEN = 712\nINVALID_LOGIN = 713\nMSG_TOO_LONG = 714\nMULTIPLE_ROOMS_WITH_NAME = 715\nTOO_MANY_ATTACHMENTS = 716\nNOT_ENABLED = 717\nROOM_NAME_RESTRICTED = 718\n\nNO_SUCH_USER = 800\nNO_SUCH_CHANNEL = 801\nNO_SUCH_ROOM = 802\nNO_ADMIN_ROOM_FOUND = 803\nNO_USER_IN_SESSION = 804\nNO_ADMIN_ONLINE = 805\n\n\n\n\nconnect\n\n\nResponds with event name \ngn_connect\n.\n\n\nRequest contains no data.\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nlogin\n\n\nResponds with event name \ngn_login\n.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"login\",\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<user name>\",\n        \"attachments\": [\n            {\n                \"objectType\": \"token\",\n                \"content\": \"<user token>\"\n            }\n        ]\n    }\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\",\n        \"actor\": {\n            \"id\": \"<user id>\",\n            \"displayName\": \"<user name in base64>\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"moderator,owner\"\n                },\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"owner\"\n                },\n                {\n                    \"objectType\": \"channel_role\",\n                    \"id\": \"<channel UUID>\",\n                    \"content\": \"admin,owner\"\n                },\n                {\n                    \"objectType\": \"global_roles\",\n                    \"content\": \"superuser,globalmod\"\n                }\n            ]\n        },\n        \"object\": {\n            \"objectType\": \"history\",\n            \"attachments\": [{\n                \"author\": {\n                    \"id\": \"<sender id>\", \n                    \"displayName\": \"<sender name in base64>\"\n                },\n                \"content\": \"<message in base64>\",\n                \"id\": \"84421980-d84a-4f6f-9ad7-0357d15d99f8\",\n                \"published\": \"2017-11-17T07:19:12Z\",\n                \"summary\": \"9fa5b40a-f0a6-44ea-93c1-acf2947e5f09\",\n                \"objectType\": \"history\"\n            }]\n        },\n        \"verb\": \"login\"\n    }\n}\n\n\n\n\nThe object attachments are non-acked messages sent to any \nprivate\n \nroom\ns (i.e. conversation based private \nmessaging). The \nobject.attachments[0].id\n is the message UUID, while the \nobject.attachments[0].summary\n is the \nroom UUID. Multiple attachments will be listed if more than one un-acked message was found during login.\n\n\nFor the user roles, there will be an ID on the attached object if the role is for a channel or for a room. If it's a\nglobal role there will be no ID on the object. Roles are comma separated if more than one role for a \nroom/channel/global.\n\n\nPossible roles are:\n\n\n\n\nglobal superuser (globalmod)\n\n\nchannel owner (owner)\n\n\nchannel admin (admin)\n\n\nroom owner (owner)\n\n\nroom moderator (moderator)\n\n\n\n\nThe only difference between global moderator and super user is that the global moderators can't remove static rooms \n(ephemeral set to \nfalse\n in room list).\n\n\nlist_channels\n\n\nResponds with event name \ngn_list_channels\n.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"list\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"channels\",\n            \"attachments\": [\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"url\": 8,\n                    \"content\": \"normal,another-tag\",\n                    \"objectType\": \"static\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"message\",\n                            \"objectType\": \"membership\",\n                            \"content\": \"1\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"url\": 20,\n                    \"content\": \"another-tag\",\n                    \"objectType\": \"temporary\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\n\nEach channel has a \nurl\n field, which is the sort order defined in the admin interface, in ascending order (lower \nurl\n\nmeans higher up in the list).\n\n\nThe \nobjectType\n of a channel tells you if this channel only contains static rooms, only temporary rooms or a mix of \nboth. Possible values are thus:\n\n\n\n\ntemporary\n\n\nstatic\n\n\nmix\n\n\n\n\nIf the channel has 0 rooms in it, the objectType will be \nmix\n.\n\n\nThe \ncontent\n field on each attachment specifies a comma separated list of tags for the channel.\n\n\nAttachments for each channel describes the ACLs for that channel.\n\n\nreceived\n\n\nAcknowledge that one or more messages has been received. The status will change from \nsent\n to \ndelivered\n.\n\n\nDoes not emit a response, only invokes the callback with the \nstatus_code\n and potentially and \nerror_message\n. Note \nthat if multiple messages are being acknowledged at the same time, they all have to be for the same room (\ntarget.id\n).\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"receive\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\"\n    },\n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]\n    }\n}\n\n\n\n\nmsg_status\n\n\nCheck ack status of a set of messages sent to a single user. Request:\n\n\n{\n    \"verb\": \"check\",\n    \"target\": {\n        \"id\": \"<uuid of the user to check ack status for>\" \n    },\n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]\n    }\n}\n\n\n\n\nIf message guarantee is not enabled on the server the \n717\n (\nNOT_ENABLED\n) error code will be retured as part of the \ncallback, and no \ngn_msg_status\n event will be sent back.\n\n\nResponse will be sent as the \ngn_msg_status\n event with the following content:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"statuses\",\n            \"attachments\": [\n                {\n                    \"id\": \"<msg UUID 1>\",\n                    \"content\": \"<ack status 1>\"\n                },\n                {\n                    \"id\": \"<msg UUID 2>\",\n                    \"content\": \"<ack status 2>\"\n                },\n                {\n                    \"id\": \"<msg UUID 3>\",\n                    \"content\": \"<ack status 3>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<user ID the ack status are for>\"\n        },\n        \"verb\": \"check\",\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\"\n    }\n}\n\n\n\n\nThe ack statuses are:\n\n\n\n\n0: not acknowledged (receiver has not acked it yet)\n\n\n1: received\n\n\n2: read\n\n\n\n\nread\n\n\nAcknowledge that one or more messages has been read. The status will change from \nsent\n/\ndelivered\n to \nread\n.\n\n\nDoes not emit a response, only invokes the callback with the \nstatus_code\n and potentially and \nerror_message\n. Note \nthat if multiple messages are being acknowledged at the same time, they all have to be for the same room (\ntarget.id\n).\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"read\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}\n\n\n\n\nIf the \ntarget.id\n is specified, the request will be relayed to online users in that room. E.g., user A sends message X to the room, user B then sends a \nread\n event after receiving it; this \nread\n event will then be sent to user A with the event name \ngn_message_read\n.\n\n\nlist_rooms\n\n\nGet a list of all rooms for a channel.\n\n\nResponds with event name \ngn_list_rooms\n.\n\n\nRequest contains:\n\n\n{\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"list\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"rooms\",\n            \"url\": \"<channel UUID>\",\n            \"attachments\": [\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"url\": 8,\n                    \"summary\": <number of users in this room (integer)>,\n                    \"objectType\": \"static\",\n                    \"content\": \"moderator,owner\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"url\": 20,\n                    \"summary\": <number of users in this room (integer)>,\n                    \"objectType\": \"temporary\",\n                    \"content\": \"\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\n\nThe \nurl\n field for \nobject\n is the \nUUID\n of the channel that these rooms are for.  \n\n\nEach room has a \nurl\n field, which is the sort order defined in the admin interface, in ascending order (lower \nurl\n\nmeans higher up in the list).\n\n\nThe \ncontent\n field on the attachments describe what kind of role you have for that room. If no roles are set then\ncontent will be empty, otherwise it will be a comma separated list of roles. Possible roles for rooms are:\n\n\n\n\nmoderator\n\n\nowner\n\n\nglobalmod\n\n\nsuperuser\n\n\n\n\nGlobal roles and roles for channels are returned in the \ngn_login\n event.\n\n\nAttachments for each room describes the ACLs for that room.\n\n\nThe \nobjectType\n for each room describes if the room is static or temporary. Static rooms are not removed automatically\nwhen empty, while temporary rooms are removed when the owner leaves (usually only for user created rooms).\n\n\nupdate_user_info\n\n\nIf a user e.g. changes his/her avatar, the change can be broadcasted to users in the same rooms as this user is in. To\ne.g. let other users know this user is currently streaming video, the \nobjectType\n \nis_streaming\n might be used:\n\n\n{\n    \"object\": {\n        \"attachments\": [\n            {\n                \"content\": \"MA==\",\n                \"objectType\": \"is_streaming\"\n            }\n        ],\n        \"objectType\": \"userInfo\"\n    },\n    \"verb\": \"update\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nThe \ncontent\n of the attachments needs to be base64 encoded.\n\n\nUpdates are saved in redis and thus will be included in the user info returned in \ngn_join\n and \n\ngn_users_in_room\n.\n\n\nResponds with event name \ngn_update_user_info\n. When the update is sent to other users it will be received as an event\nwith name \ngn_user_info_updated\n.\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nOr if missing data, e.g.:\n\n\n{\n    \"status_code\": 509,\n    \"message\": \"no objectType on attachment for object\"\n}\n\n\n\n\nrequest_admin\n\n\nWhen help is wanted in a room, a user can request for an admin to join and help out. Every channel has an Admin room,\nwhich only admins can see when listing rooms and only admins can join. When a \nrequest_admin\n event is sent to the server\nit will be delivered to the admin room for that channel and the admins in that room can decide what to do.\n\n\nImportant:\n\n\n\n\nIf no user with the global role \nsuperuser\n or \nglobalmod\n is online, the 805 code will be returned (\"no admin is \nonline\").\n\n\n\n\nResponds with event name \ngn_request_admin\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID to request help for>\"\n    },\n    \"object\": {\n        \"content\": \"<base64 encoded message that will be delivered to the admin room>\"\n    },\n    \"verb\": \"help\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nIf no admin is online, the response will be:\n\n\n{\n    \"status_code\": 805,\n    \"message\": \"no admin is online\"\n}\n\n\n\n\nThe \nobject.content\n could be anything, e.g. a base64 encoded json message with link to backend, extra information, a \nreason text etc. \n\n\nThe event generated to be sent to the admin room is called \ngn_admin_requested\n (see \n\nEvents\n for more information).\n\n\nleave\n\n\nLeave a room.\n\n\nResponds with event name \ngn_leave\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"verb\": \"leave\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nusers_in_room\n\n\nList all users in a room.\n\n\nResponds with event name \ngn_users_in_room\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"verb\": \"list\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"users\",\n            \"attachments\": [\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"content\": \"globalmod,moderator\"\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"content\": \"moderator\"\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\n\nThe \ncontent\n of the user attachment describes the roles this user has in this room, plus any global roles. Examples:\n\n\n\n\nglobalmod,moderator\n\n\nmoderator\n\n\nsuperuser\n\n\n\n\nIf no specific roles, the value will be blank.\n\n\nhistory\n\n\nTODO: include user UUID as well as user name.\n\n\nWhen joining a room the history will be included in the \ngn_join\n response event. If history is needed for a separate\nreason than the \nhistory\n event can be used. Can also be used to get history for a private chat with another user, if\n\"target.id\" is set to the user UUID instead of the room UUID.\n\n\nResponds with event name \ngn_history\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"updated\": \"<last read timestamp, if configured in server will return messages since this time>\",\n    \"verb\": \"list\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"messages\",\n            \"attachments\": [\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                },\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<room UUID>\"\n        },\n        \"verb\": \"history\"\n    }\n}\n\n\n\n\nstatus\n\n\nChange the online status for this user.\n\n\nResponds with \ngn_status\n.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"<one of online/offline/invisible>\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nget_acl\n\n\nGet the permissions (ACL) for a channel or room.\n\n\nResponds with \ngn_get_acl\n.\n\n\nRequest contains:\n\n\n    {\n        \"target\": {\n            \"id\": \"<room UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"verb\": \"get\"\n    }\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room/channel UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"object\": {\n            \"objectType\": \"acl\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                },\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                }\n            ]\n        },\n        \"verb\": \"get\"\n    }\n}\n\n\n\n\nset_acl\n\n\nUpdate the permissions of a room/channel. If the \"content\" is blank, the ACL with that type for the specified action\nwill be removed. Example \"API actions\" are \"join\", \"create\", \"message\", \"kick\". Example \"permission types\" are \"age\",\n\"gender\", \"membership\".\n\n\nResponds with \ngn_set_acl\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room/channel UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"object\": {\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"set\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\ncreate\n\n\nCreate a new room under a channel. The sender of the event will be set as the first owner of the new room.\n\n\nResponds with \ngn_create\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"create\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<the generated UUID for this room>\",\n            \"displayName\": \"<name of the new room>\",\n            \"objectType\": \"temporary\"\n        },\n        \"object\": {\n            \"url\": \"<channel UUID>\"\n        },\n        \"verb\": \"create\"\n    }\n}\n\n\n\n\nIf the amount of private rooms already exceed 2, the error code \n709\n (\nTOO_MANY_PRIVATE_ROOMS\n) will be returned.\n\n\nThe \ntarget.objectType\n will always be \ntemporary\n since all rooms created using the API are user created rooms, meaning\nthey will be automatically removed when the owner leaves.\n\n\nIt is also possible to specify ACLs for a room while creating it, but adding \nobject.attachments\n as in the \nset_acl\n \nevent:\n\n\n{\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\",\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"create\"\n}\n\n\n\n\ninvite\n\n\nInvite another user to a room the current user is already in.\n\n\nResponds with \ngn_invite\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the user to invite>\"\n    },\n    \"actor\": {\n        \"url\": \"<the room UUID the invitation is for>\"\n    },\n    \"verb\": \"invite\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\ndelete\n\n\nDelete a message from a room (needs to be superuser, admin for channel, owner of channel, moderator of the room, owner \nof room or (configurable) sender of the message).\n\n\nIf \nobject_type\n is set to \nroom\n the \nobject.id\n should be the UUID of a room. All messages in that room will then be\ndeleted. If \nobject_type\n is set to anything else, or not specified at all, then \nobject.id\n is assumed to be the UUID\nof a single message.\n\n\nResponds with \ngn_delete\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room to delete from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the message to delete OR the UUID of the room to clear>\",\n        \"object_type\": \"<optional; if set to 'room' the object.id is assumed to be the room id>\"\n    },\n    \"verb\": \"delete\"\n}\n\n\n\n\nkick\n\n\nKick a user from a room.\n\n\nResponds with \ngn_kick\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room to kick from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to kick>\"\n    },\n    \"verb\": \"kick\"\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nban\n\n\nBan a user from a room for a given amount of time.\n\n\nResponds with \ngn_ban\n.\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room/channel to ban from>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to ban>\",\n        \"summary\": \"<ban duration, an integer suffixed with one of [d, h, m, s]>\",\n        \"content\": \"<optional reason field, base64>\"\n    },\n    \"verb\": \"ban\"\n}\n\n\n\n\nIf banning a used in a room, set objectType to \nroom\n and \ntarget.id\n to the uuid of the room. If banning from a channel,\nset \nobjectType\n to \nchannel\n and \ntarget.id\n to the uuid of the channel. If banning globally, set objectType to \nglobal\n\nand skip \ntarget.id\n.\n\n\nSummary is the duration of the ban. It's a number with a suffix d, h, m or s, meaning days, hours, minutes and seconds.\nOnly one suffix can be used. E.g.:\n\n\n\n\n5m (ban for five minutes),\n\n\n3600s (ban for 3600 seconds, same as 1h),\n\n\n365d (ban for one year).\n\n\n\n\nIt's not possible to permanently ban a user, but you can set a very large duration for the same effect. The only\nrestriction is that the date when the ban ends (\nutcnow()+duration\n) must be before the year 10000 (date lib restriction).\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nmessage\n\n\nSend a message to a \nroom\n UUID (can be the user UUID or an actual room UUID).\n\n\nResponds with event name \ngn_message\n.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message, base64 encoded>\",\n    }\n}\n\n\n\n\nIf request is for conversation-based private messaging, use \nobjectType: 'private'\n. In this case, the other user(s)\nin this conversation (\nowner\ns of the \nroom\n) will initially have a \nNOT_ACKED\n status for the message. If they are\nonline they will receive it and they can acknowledge the message. If they are offline they will receive it in \ngn_login\n\nthen they come online (all non-acked messages for rooms they are \nowner\n for).\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"actor\": {\n            \"id\": \"<your user ID>\",\n            \"displayName\": \"<your user name>\"\n        },\n        \"verb\": \"send\",\n        \"target\": {\n            \"id\": \"<room ID>\",\n            \"displayName\": \"<room name>\"\n        },\n        \"object\": {\n            \"content\": \"<the message>\",\n            \"displayName\": \"<the channel name>\",\n            \"url\": \"<the channel id>\",\n            \"objectType\": \"<room/private>\"\n        }\n    }\n}\n\n\n\n\nThe response will send the same ActivityStreams as was in the request, with the addition of a server generated ID (uuid)\nand the \npublished\n field set to the time the server received the request (in RFC3339 format).\n\n\nremove_room\n\n\nResponse with the event name \ngn_remove_room\n.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"remove\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room uuid>\",\n            \"displayName\": \"<room name in base64>\",\n            \"objectType\": \"room\"\n        },\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"verb\": \"removed\"\n    }\n}\n\n\n\n\nreport\n\n\nNo response.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"report\",\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\"\n    }\n}\n\n\n\n\nA report will be sent to both the admin room and as an external event published on the MQ.\n\n\njoin\n\n\nResponds with the event name \ngn_join\n.\n\n\nIn the \nuser\n attachments, the \ncontent\n fields tells you the room roles that the user has in this room (as a comma\nseparated value), plus any global roles. Possible roles are:\n\n\n\n\nsuperuser,\n\n\nglobalmod,\n\n\nowner,\n\n\nmoderator,\n\n\nadmin.\n\n\n\n\nCurrently only the \nsuperuser\n and \nglobalmod\n role is considered when the \nrequest_admin\n api is used.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}\n\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"room\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"history\",\n                    \"attachments\": [\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        },\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"owner\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        },\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"acl\",\n                    \"attachments\": [\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        },\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"user\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                            \"content\": \"moderator,owner\",\n                            \"attachments\": [\n                                {\n                                    \"content\": \"NDA=\",\n                                    \"objectType\": \"age\"\n                                },\n                                {\n                                    \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                                    \"objectType\": \"avatar\"\n                                }\n                            ]\n                        },\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                            \"content\": \"superuser\",\n                            \"attachments\": [\n                                {\n                                    \"content\": \"NDA=\",\n                                    \"objectType\": \"age\"\n                                },\n                                {\n                                    \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                                    \"objectType\": \"avatar\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n            ]\n        },\n        \"verb\": \"join\",\n        \"target\": {\n            \"id\": \"<the room ID that the user joined>\"\n        }\n    }\n}\n\n\n\n\nAttachments for each user contains the user data, e.g. user name, age, city etc.",
            "title": "API"
        },
        {
            "location": "/md/api/#error-codes",
            "text": "OK = 200\nUNKNOWN_ERROR = 250\n\nMISSING_ACTOR_ID = 500\nMISSING_OBJECT_ID = 501\nMISSING_TARGET_ID = 502\nMISSING_OBJECT_URL = 503\nMISSING_TARGET_DISPLAY_NAME = 504\nMISSING_ACTOR_URL = 505\nMISSING_OBJECT_CONTENT = 506\nMISSING_OBJECT = 507\nMISSING_OBJECT_ATTACHMENTS = 508\nMISSING_ATTACHMENT_TYPE = 509\nMISSING_ATTACHMENT_CONTENT = 510\n\nINVALID_TARGET_TYPE = 600\nINVALID_ACL_TYPE = 601\nINVALID_ACL_ACTION = 602\nINVALID_ACL_VALUE = 603\nINVALID_STATUS = 604\nINVALID_OBJECT_TYPE = 605\nINVALID_BAN_DURATION = 606\n\nEMPTY_MESSAGE = 700\nNOT_BASE64 = 701\nUSER_NOT_IN_ROOM = 702\nUSER_IS_BANNED = 703\nROOM_ALREADY_EXISTS = 704\nNOT_ALLOWED = 705\nVALIDATION_ERROR = 706\nROOM_FULL = 707\nNOT_ONLINE = 708\nTOO_MANY_PRIVATE_ROOMS = 709\nROOM_NAME_TOO_LONG = 710\nROOM_NAME_TOO_SHORT = 711\nINVALID_TOKEN = 712\nINVALID_LOGIN = 713\nMSG_TOO_LONG = 714\nMULTIPLE_ROOMS_WITH_NAME = 715\nTOO_MANY_ATTACHMENTS = 716\nNOT_ENABLED = 717\nROOM_NAME_RESTRICTED = 718\n\nNO_SUCH_USER = 800\nNO_SUCH_CHANNEL = 801\nNO_SUCH_ROOM = 802\nNO_ADMIN_ROOM_FOUND = 803\nNO_USER_IN_SESSION = 804\nNO_ADMIN_ONLINE = 805",
            "title": "Error Codes"
        },
        {
            "location": "/md/api/#connect",
            "text": "Responds with event name  gn_connect .  Request contains no data.  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "connect"
        },
        {
            "location": "/md/api/#login",
            "text": "Responds with event name  gn_login .  Request contains:  {\n    \"verb\": \"login\",\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<user name>\",\n        \"attachments\": [\n            {\n                \"objectType\": \"token\",\n                \"content\": \"<user token>\"\n            }\n        ]\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\",\n        \"actor\": {\n            \"id\": \"<user id>\",\n            \"displayName\": \"<user name in base64>\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"moderator,owner\"\n                },\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"owner\"\n                },\n                {\n                    \"objectType\": \"channel_role\",\n                    \"id\": \"<channel UUID>\",\n                    \"content\": \"admin,owner\"\n                },\n                {\n                    \"objectType\": \"global_roles\",\n                    \"content\": \"superuser,globalmod\"\n                }\n            ]\n        },\n        \"object\": {\n            \"objectType\": \"history\",\n            \"attachments\": [{\n                \"author\": {\n                    \"id\": \"<sender id>\", \n                    \"displayName\": \"<sender name in base64>\"\n                },\n                \"content\": \"<message in base64>\",\n                \"id\": \"84421980-d84a-4f6f-9ad7-0357d15d99f8\",\n                \"published\": \"2017-11-17T07:19:12Z\",\n                \"summary\": \"9fa5b40a-f0a6-44ea-93c1-acf2947e5f09\",\n                \"objectType\": \"history\"\n            }]\n        },\n        \"verb\": \"login\"\n    }\n}  The object attachments are non-acked messages sent to any  private   room s (i.e. conversation based private \nmessaging). The  object.attachments[0].id  is the message UUID, while the  object.attachments[0].summary  is the \nroom UUID. Multiple attachments will be listed if more than one un-acked message was found during login.  For the user roles, there will be an ID on the attached object if the role is for a channel or for a room. If it's a\nglobal role there will be no ID on the object. Roles are comma separated if more than one role for a \nroom/channel/global.  Possible roles are:   global superuser (globalmod)  channel owner (owner)  channel admin (admin)  room owner (owner)  room moderator (moderator)   The only difference between global moderator and super user is that the global moderators can't remove static rooms \n(ephemeral set to  false  in room list).",
            "title": "login"
        },
        {
            "location": "/md/api/#list_channels",
            "text": "Responds with event name  gn_list_channels .  Request contains:  {\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"channels\",\n            \"attachments\": [\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"url\": 8,\n                    \"content\": \"normal,another-tag\",\n                    \"objectType\": \"static\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"message\",\n                            \"objectType\": \"membership\",\n                            \"content\": \"1\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"url\": 20,\n                    \"content\": \"another-tag\",\n                    \"objectType\": \"temporary\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}  Each channel has a  url  field, which is the sort order defined in the admin interface, in ascending order (lower  url \nmeans higher up in the list).  The  objectType  of a channel tells you if this channel only contains static rooms, only temporary rooms or a mix of \nboth. Possible values are thus:   temporary  static  mix   If the channel has 0 rooms in it, the objectType will be  mix .  The  content  field on each attachment specifies a comma separated list of tags for the channel.  Attachments for each channel describes the ACLs for that channel.",
            "title": "list_channels"
        },
        {
            "location": "/md/api/#received",
            "text": "Acknowledge that one or more messages has been received. The status will change from  sent  to  delivered .  Does not emit a response, only invokes the callback with the  status_code  and potentially and  error_message . Note \nthat if multiple messages are being acknowledged at the same time, they all have to be for the same room ( target.id ).  Request contains:  {\n    \"verb\": \"receive\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\"\n    },\n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]\n    }\n}",
            "title": "received"
        },
        {
            "location": "/md/api/#msg_status",
            "text": "Check ack status of a set of messages sent to a single user. Request:  {\n    \"verb\": \"check\",\n    \"target\": {\n        \"id\": \"<uuid of the user to check ack status for>\" \n    },\n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]\n    }\n}  If message guarantee is not enabled on the server the  717  ( NOT_ENABLED ) error code will be retured as part of the \ncallback, and no  gn_msg_status  event will be sent back.  Response will be sent as the  gn_msg_status  event with the following content:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"statuses\",\n            \"attachments\": [\n                {\n                    \"id\": \"<msg UUID 1>\",\n                    \"content\": \"<ack status 1>\"\n                },\n                {\n                    \"id\": \"<msg UUID 2>\",\n                    \"content\": \"<ack status 2>\"\n                },\n                {\n                    \"id\": \"<msg UUID 3>\",\n                    \"content\": \"<ack status 3>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<user ID the ack status are for>\"\n        },\n        \"verb\": \"check\",\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\"\n    }\n}  The ack statuses are:   0: not acknowledged (receiver has not acked it yet)  1: received  2: read",
            "title": "msg_status"
        },
        {
            "location": "/md/api/#read",
            "text": "Acknowledge that one or more messages has been read. The status will change from  sent / delivered  to  read .  Does not emit a response, only invokes the callback with the  status_code  and potentially and  error_message . Note \nthat if multiple messages are being acknowledged at the same time, they all have to be for the same room ( target.id ).  Request contains:  {\n    \"verb\": \"read\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}  If the  target.id  is specified, the request will be relayed to online users in that room. E.g., user A sends message X to the room, user B then sends a  read  event after receiving it; this  read  event will then be sent to user A with the event name  gn_message_read .",
            "title": "read"
        },
        {
            "location": "/md/api/#list_rooms",
            "text": "Get a list of all rooms for a channel.  Responds with event name  gn_list_rooms .  Request contains:  {\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"rooms\",\n            \"url\": \"<channel UUID>\",\n            \"attachments\": [\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"url\": 8,\n                    \"summary\": <number of users in this room (integer)>,\n                    \"objectType\": \"static\",\n                    \"content\": \"moderator,owner\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"url\": 20,\n                    \"summary\": <number of users in this room (integer)>,\n                    \"objectType\": \"temporary\",\n                    \"content\": \"\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}  The  url  field for  object  is the  UUID  of the channel that these rooms are for.    Each room has a  url  field, which is the sort order defined in the admin interface, in ascending order (lower  url \nmeans higher up in the list).  The  content  field on the attachments describe what kind of role you have for that room. If no roles are set then\ncontent will be empty, otherwise it will be a comma separated list of roles. Possible roles for rooms are:   moderator  owner  globalmod  superuser   Global roles and roles for channels are returned in the  gn_login  event.  Attachments for each room describes the ACLs for that room.  The  objectType  for each room describes if the room is static or temporary. Static rooms are not removed automatically\nwhen empty, while temporary rooms are removed when the owner leaves (usually only for user created rooms).",
            "title": "list_rooms"
        },
        {
            "location": "/md/api/#update_user_info",
            "text": "If a user e.g. changes his/her avatar, the change can be broadcasted to users in the same rooms as this user is in. To\ne.g. let other users know this user is currently streaming video, the  objectType   is_streaming  might be used:  {\n    \"object\": {\n        \"attachments\": [\n            {\n                \"content\": \"MA==\",\n                \"objectType\": \"is_streaming\"\n            }\n        ],\n        \"objectType\": \"userInfo\"\n    },\n    \"verb\": \"update\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}  The  content  of the attachments needs to be base64 encoded.  Updates are saved in redis and thus will be included in the user info returned in  gn_join  and  gn_users_in_room .  Responds with event name  gn_update_user_info . When the update is sent to other users it will be received as an event\nwith name  gn_user_info_updated .  Response data if successful:  {\n    \"status_code\": 200\n}  Or if missing data, e.g.:  {\n    \"status_code\": 509,\n    \"message\": \"no objectType on attachment for object\"\n}",
            "title": "update_user_info"
        },
        {
            "location": "/md/api/#request_admin",
            "text": "When help is wanted in a room, a user can request for an admin to join and help out. Every channel has an Admin room,\nwhich only admins can see when listing rooms and only admins can join. When a  request_admin  event is sent to the server\nit will be delivered to the admin room for that channel and the admins in that room can decide what to do.  Important:   If no user with the global role  superuser  or  globalmod  is online, the 805 code will be returned (\"no admin is \nonline\").   Responds with event name  gn_request_admin .  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID to request help for>\"\n    },\n    \"object\": {\n        \"content\": \"<base64 encoded message that will be delivered to the admin room>\"\n    },\n    \"verb\": \"help\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}  If no admin is online, the response will be:  {\n    \"status_code\": 805,\n    \"message\": \"no admin is online\"\n}  The  object.content  could be anything, e.g. a base64 encoded json message with link to backend, extra information, a \nreason text etc.   The event generated to be sent to the admin room is called  gn_admin_requested  (see  Events  for more information).",
            "title": "request_admin"
        },
        {
            "location": "/md/api/#leave",
            "text": "Leave a room.  Responds with event name  gn_leave .  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"verb\": \"leave\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "leave"
        },
        {
            "location": "/md/api/#users_in_room",
            "text": "List all users in a room.  Responds with event name  gn_users_in_room .  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"users\",\n            \"attachments\": [\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"content\": \"globalmod,moderator\"\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"content\": \"moderator\"\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}  The  content  of the user attachment describes the roles this user has in this room, plus any global roles. Examples:   globalmod,moderator  moderator  superuser   If no specific roles, the value will be blank.",
            "title": "users_in_room"
        },
        {
            "location": "/md/api/#history",
            "text": "TODO: include user UUID as well as user name.  When joining a room the history will be included in the  gn_join  response event. If history is needed for a separate\nreason than the  history  event can be used. Can also be used to get history for a private chat with another user, if\n\"target.id\" is set to the user UUID instead of the room UUID.  Responds with event name  gn_history .  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"updated\": \"<last read timestamp, if configured in server will return messages since this time>\",\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"messages\",\n            \"attachments\": [\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                },\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<room UUID>\"\n        },\n        \"verb\": \"history\"\n    }\n}",
            "title": "history"
        },
        {
            "location": "/md/api/#status",
            "text": "Change the online status for this user.  Responds with  gn_status .  Request contains:  {\n    \"verb\": \"<one of online/offline/invisible>\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "status"
        },
        {
            "location": "/md/api/#get_acl",
            "text": "Get the permissions (ACL) for a channel or room.  Responds with  gn_get_acl .  Request contains:      {\n        \"target\": {\n            \"id\": \"<room UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"verb\": \"get\"\n    }  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room/channel UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"object\": {\n            \"objectType\": \"acl\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                },\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                }\n            ]\n        },\n        \"verb\": \"get\"\n    }\n}",
            "title": "get_acl"
        },
        {
            "location": "/md/api/#set_acl",
            "text": "Update the permissions of a room/channel. If the \"content\" is blank, the ACL with that type for the specified action\nwill be removed. Example \"API actions\" are \"join\", \"create\", \"message\", \"kick\". Example \"permission types\" are \"age\",\n\"gender\", \"membership\".  Responds with  gn_set_acl .  Request contains:  {\n    \"target\": {\n        \"id\": \"<room/channel UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"object\": {\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"set\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "set_acl"
        },
        {
            "location": "/md/api/#create",
            "text": "Create a new room under a channel. The sender of the event will be set as the first owner of the new room.  Responds with  gn_create .  Request contains:  {\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"create\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<the generated UUID for this room>\",\n            \"displayName\": \"<name of the new room>\",\n            \"objectType\": \"temporary\"\n        },\n        \"object\": {\n            \"url\": \"<channel UUID>\"\n        },\n        \"verb\": \"create\"\n    }\n}  If the amount of private rooms already exceed 2, the error code  709  ( TOO_MANY_PRIVATE_ROOMS ) will be returned.  The  target.objectType  will always be  temporary  since all rooms created using the API are user created rooms, meaning\nthey will be automatically removed when the owner leaves.  It is also possible to specify ACLs for a room while creating it, but adding  object.attachments  as in the  set_acl  \nevent:  {\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\",\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"create\"\n}",
            "title": "create"
        },
        {
            "location": "/md/api/#invite",
            "text": "Invite another user to a room the current user is already in.  Responds with  gn_invite .  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the user to invite>\"\n    },\n    \"actor\": {\n        \"url\": \"<the room UUID the invitation is for>\"\n    },\n    \"verb\": \"invite\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "invite"
        },
        {
            "location": "/md/api/#delete",
            "text": "Delete a message from a room (needs to be superuser, admin for channel, owner of channel, moderator of the room, owner \nof room or (configurable) sender of the message).  If  object_type  is set to  room  the  object.id  should be the UUID of a room. All messages in that room will then be\ndeleted. If  object_type  is set to anything else, or not specified at all, then  object.id  is assumed to be the UUID\nof a single message.  Responds with  gn_delete .  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room to delete from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the message to delete OR the UUID of the room to clear>\",\n        \"object_type\": \"<optional; if set to 'room' the object.id is assumed to be the room id>\"\n    },\n    \"verb\": \"delete\"\n}",
            "title": "delete"
        },
        {
            "location": "/md/api/#kick",
            "text": "Kick a user from a room.  Responds with  gn_kick .  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room to kick from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to kick>\"\n    },\n    \"verb\": \"kick\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "kick"
        },
        {
            "location": "/md/api/#ban",
            "text": "Ban a user from a room for a given amount of time.  Responds with  gn_ban .  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room/channel to ban from>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to ban>\",\n        \"summary\": \"<ban duration, an integer suffixed with one of [d, h, m, s]>\",\n        \"content\": \"<optional reason field, base64>\"\n    },\n    \"verb\": \"ban\"\n}  If banning a used in a room, set objectType to  room  and  target.id  to the uuid of the room. If banning from a channel,\nset  objectType  to  channel  and  target.id  to the uuid of the channel. If banning globally, set objectType to  global \nand skip  target.id .  Summary is the duration of the ban. It's a number with a suffix d, h, m or s, meaning days, hours, minutes and seconds.\nOnly one suffix can be used. E.g.:   5m (ban for five minutes),  3600s (ban for 3600 seconds, same as 1h),  365d (ban for one year).   It's not possible to permanently ban a user, but you can set a very large duration for the same effect. The only\nrestriction is that the date when the ban ends ( utcnow()+duration ) must be before the year 10000 (date lib restriction).  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "ban"
        },
        {
            "location": "/md/api/#message",
            "text": "Send a message to a  room  UUID (can be the user UUID or an actual room UUID).  Responds with event name  gn_message .  Request contains:  {\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message, base64 encoded>\",\n    }\n}  If request is for conversation-based private messaging, use  objectType: 'private' . In this case, the other user(s)\nin this conversation ( owner s of the  room ) will initially have a  NOT_ACKED  status for the message. If they are\nonline they will receive it and they can acknowledge the message. If they are offline they will receive it in  gn_login \nthen they come online (all non-acked messages for rooms they are  owner  for).  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"actor\": {\n            \"id\": \"<your user ID>\",\n            \"displayName\": \"<your user name>\"\n        },\n        \"verb\": \"send\",\n        \"target\": {\n            \"id\": \"<room ID>\",\n            \"displayName\": \"<room name>\"\n        },\n        \"object\": {\n            \"content\": \"<the message>\",\n            \"displayName\": \"<the channel name>\",\n            \"url\": \"<the channel id>\",\n            \"objectType\": \"<room/private>\"\n        }\n    }\n}  The response will send the same ActivityStreams as was in the request, with the addition of a server generated ID (uuid)\nand the  published  field set to the time the server received the request (in RFC3339 format).",
            "title": "message"
        },
        {
            "location": "/md/api/#remove_room",
            "text": "Response with the event name  gn_remove_room .  Request contains:  {\n    \"verb\": \"remove\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room uuid>\",\n            \"displayName\": \"<room name in base64>\",\n            \"objectType\": \"room\"\n        },\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"verb\": \"removed\"\n    }\n}",
            "title": "remove_room"
        },
        {
            "location": "/md/api/#report",
            "text": "No response.  Request contains:  {\n    \"verb\": \"report\",\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\"\n    }\n}  A report will be sent to both the admin room and as an external event published on the MQ.",
            "title": "report"
        },
        {
            "location": "/md/api/#join",
            "text": "Responds with the event name  gn_join .  In the  user  attachments, the  content  fields tells you the room roles that the user has in this room (as a comma\nseparated value), plus any global roles. Possible roles are:   superuser,  globalmod,  owner,  moderator,  admin.   Currently only the  superuser  and  globalmod  role is considered when the  request_admin  api is used.  Request contains:  {\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"room\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"history\",\n                    \"attachments\": [\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        },\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"owner\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        },\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"acl\",\n                    \"attachments\": [\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        },\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"user\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                            \"content\": \"moderator,owner\",\n                            \"attachments\": [\n                                {\n                                    \"content\": \"NDA=\",\n                                    \"objectType\": \"age\"\n                                },\n                                {\n                                    \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                                    \"objectType\": \"avatar\"\n                                }\n                            ]\n                        },\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                            \"content\": \"superuser\",\n                            \"attachments\": [\n                                {\n                                    \"content\": \"NDA=\",\n                                    \"objectType\": \"age\"\n                                },\n                                {\n                                    \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                                    \"objectType\": \"avatar\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n            ]\n        },\n        \"verb\": \"join\",\n        \"target\": {\n            \"id\": \"<the room ID that the user joined>\"\n        }\n    }\n}  Attachments for each user contains the user data, e.g. user name, age, city etc.",
            "title": "join"
        },
        {
            "location": "/md/web/",
            "text": "GET \n/api/spam\n\n\nGet the latest messages classified as spam.\n\n\nuser@box:~$ curl -X GET localhost:4556/api/spam\n\n\n\n\nResponse would be something similar to the following:\n\n\n{\n    \"data\": [{\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 8,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"42957c6c-6290-4744-8e79-8c6e3fe7319b\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535312965,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }, {\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 7,\n        \"message\": \"gfdhgdf\",\n        \"message_deleted\": true,\n        \"message_id\": \"75550bd5-faa8-4393-b8da-65141f46898c\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.81171554,0.99,1\",\n        \"time_stamp\": 1535312962,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }],\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/search\n\n\nSearch for spam messages given a time range and either a room uuid or user ID of a sender.\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/search -H 'Content-Type: application/json' -d '{\"room\":\"9fa5b40a-f0a6-44ea-93c1-acf2947e5f09\",\"from\":\"2018-08-26T04:00:00Z\",\"to\":\"2018-08-27T04:00:00Z\"}'\n\n\n\n\nResponse would be something similar to the following:\n\n\n{\n    \"data\": [{\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 8,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"42957c6c-6290-4744-8e79-8c6e3fe7319b\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535312965,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }, {\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 7,\n        \"message\": \"gfdhgdf\",\n        \"message_deleted\": true,\n        \"message_id\": \"75550bd5-faa8-4393-b8da-65141f46898c\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.81171554,0.99,1\",\n        \"time_stamp\": 1535312962,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }],\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nGET \n/api/spam/<spam_id>\n\n\nGet one spam message.\n\n\nRequest:\n\n\nuser@box:~$ curl -X GET localhost:4556/api/spam/3\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": false,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/<spam_id>/incorrect\n\n\nSet a spam message as incorrectly classified. The \ncorrect\n flag on this spam messages will be \nfalse\n after this.\n\n\nRequest:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/3/incorrect\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/<spam_id>/correct\n\n\nSet a spam message as correctly classified. The \ncorrect\n flag on this spam messages will be \ntrue\n after this.\n\n\nRequest:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/3/correct\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/enable\n\n\nEnable the spam classifier. \n\n\nWhen enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.\n\n\nRequest:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/enable\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/disable\n\n\nDisable the spam classifier. \n\n\nWhen enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.\n\n\nRequest:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/disable\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nGET \n/api/spam/isenabled\n\n\nCheck if the spam classifier is enabled or not. \n\n\nWhen enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.\n\n\nRequest:\n\n\nuser@box:~$ curl -X GET localhost:4556/api/spam/isenabled\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"enabled\",\n    \"status_code\": 200\n}\n\n\n\n\nExample:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/disable\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/isenabled\n{\n    \"data\": {},\n    \"message\": \"disabled\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X POST localhost:4556/api/spam/enable\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/isenabled\n{\n    \"data\": {},\n    \"message\": \"enabled\",\n    \"status_code\": 200\n}\n\n\n\n\nGET \n/api/spam/settings\n\n\nGet the current settings for the spam classifier.\n\n\nResponse:\n\n\n{\n    \"data\": {\n        \"enabled\": true,\n        \"max_length\": 250,\n        \"min_length\": 10,\n        \"threshold\": 80,\n        \"ignore_emoji\": true,\n        \"should_delete\": false,\n        \"should_save\": false\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/settings\n\n\nSet the current settings for the spam classifier. One or more settings can be specified in the dictionary.\n\n\nRequest:\n\n\nuser@box:~$ curl -X POST localhost:4556/api/spam/settings -H 'Content-Type: application/json' -d '{\"enabled\":true,\"max_length\":250,\"min_length\":10,\"should_delete\":false,\"should_save\":false,\"ignore_emoji\":true,\"threshold\":80}'\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPUT \n/api/spam/set/minlen/<min_length>\n\n\nset min length of message that should be checked for spam.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPUT \n/api/spam/set/maxlen/<min_length>\n\n\nset max length of message that should be checked for spam.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/disable/save\n\n\nDisable saving of spam messages to separate 'spams' table.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/disable/delete\n\n\nDisable deletion of spam messages from storage backend.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/enable/save\n\n\nEnable saving of spam messages to separate 'spams' table.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nPOST \n/api/spam/enable/delete\n\n\nEnable deletion of spam messages from storage backend.\n\n\nResponse:\n\n\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nDeleting a message classified as spam\n\n\nThe \nmessage_id\n field describes the ID of the message stored in the message store. It can be deleted by using the history web API:\n\n\nuser@box:~$ curl -X GET localhost:4556/api/spam/3\n{\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": false,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X DELETE localhost:4556/api/history/21aa49f3-3dc5-4bef-a08d-84f7a516bf49\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/3\n{\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}\n\n\n\n\nProbability\n\n\nThe field \nprobability\n are percentages from three different classifiers. If at least two of them predict with a percentage of at least 66% that a message is spam, then it will be labeled as such.\n\n\nThe first number is from XGBoost, the second from a Random Forest, and the third SVC with a polynomial kernel. The third number is always either \n0\n or \n1\n, and never a fraction.",
            "title": "Web UI API"
        },
        {
            "location": "/md/web/#get-apispam",
            "text": "Get the latest messages classified as spam.  user@box:~$ curl -X GET localhost:4556/api/spam  Response would be something similar to the following:  {\n    \"data\": [{\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 8,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"42957c6c-6290-4744-8e79-8c6e3fe7319b\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535312965,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }, {\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 7,\n        \"message\": \"gfdhgdf\",\n        \"message_deleted\": true,\n        \"message_id\": \"75550bd5-faa8-4393-b8da-65141f46898c\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.81171554,0.99,1\",\n        \"time_stamp\": 1535312962,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }],\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "GET /api/spam"
        },
        {
            "location": "/md/web/#post-apispamsearch",
            "text": "Search for spam messages given a time range and either a room uuid or user ID of a sender.  user@box:~$ curl -X POST localhost:4556/api/spam/search -H 'Content-Type: application/json' -d '{\"room\":\"9fa5b40a-f0a6-44ea-93c1-acf2947e5f09\",\"from\":\"2018-08-26T04:00:00Z\",\"to\":\"2018-08-27T04:00:00Z\"}'  Response would be something similar to the following:  {\n    \"data\": [{\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 8,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"42957c6c-6290-4744-8e79-8c6e3fe7319b\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535312965,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }, {\n        \"correct\": true,\n        \"from_id\": \"126144\",\n        \"from_name\": \"fuyfuyf\",\n        \"id\": 7,\n        \"message\": \"gfdhgdf\",\n        \"message_deleted\": true,\n        \"message_id\": \"75550bd5-faa8-4393-b8da-65141f46898c\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.81171554,0.99,1\",\n        \"time_stamp\": 1535312962,\n        \"to_id\": \"126144\",\n        \"to_name\": \"fdsa\"\n    }],\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/search"
        },
        {
            "location": "/md/web/#get-apispamspam_id",
            "text": "Get one spam message.  Request:  user@box:~$ curl -X GET localhost:4556/api/spam/3  Response:  {\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": false,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "GET /api/spam/&lt;spam_id&gt;"
        },
        {
            "location": "/md/web/#post-apispamspam_idincorrect",
            "text": "Set a spam message as incorrectly classified. The  correct  flag on this spam messages will be  false  after this.  Request:  user@box:~$ curl -X POST localhost:4556/api/spam/3/incorrect  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/&lt;spam_id&gt;/incorrect"
        },
        {
            "location": "/md/web/#post-apispamspam_idcorrect",
            "text": "Set a spam message as correctly classified. The  correct  flag on this spam messages will be  true  after this.  Request:  user@box:~$ curl -X POST localhost:4556/api/spam/3/correct  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/&lt;spam_id&gt;/correct"
        },
        {
            "location": "/md/web/#post-apispamenable",
            "text": "Enable the spam classifier.   When enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.  Request:  user@box:~$ curl -X POST localhost:4556/api/spam/enable  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/enable"
        },
        {
            "location": "/md/web/#post-apispamdisable",
            "text": "Disable the spam classifier.   When enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.  Request:  user@box:~$ curl -X POST localhost:4556/api/spam/disable  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/disable"
        },
        {
            "location": "/md/web/#get-apispamisenabled",
            "text": "Check if the spam classifier is enabled or not.   When enabled, the classifier will prevent messages being broadcasted that has been classified as spam. If disabled, it will still classify them, but it won't prevent them from being broadcasted.  Request:  user@box:~$ curl -X GET localhost:4556/api/spam/isenabled  Response:  {\n    \"data\": {},\n    \"message\": \"enabled\",\n    \"status_code\": 200\n}  Example:  user@box:~$ curl -X POST localhost:4556/api/spam/disable\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/isenabled\n{\n    \"data\": {},\n    \"message\": \"disabled\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X POST localhost:4556/api/spam/enable\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/isenabled\n{\n    \"data\": {},\n    \"message\": \"enabled\",\n    \"status_code\": 200\n}",
            "title": "GET /api/spam/isenabled"
        },
        {
            "location": "/md/web/#get-apispamsettings",
            "text": "Get the current settings for the spam classifier.  Response:  {\n    \"data\": {\n        \"enabled\": true,\n        \"max_length\": 250,\n        \"min_length\": 10,\n        \"threshold\": 80,\n        \"ignore_emoji\": true,\n        \"should_delete\": false,\n        \"should_save\": false\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "GET /api/spam/settings"
        },
        {
            "location": "/md/web/#post-apispamsettings",
            "text": "Set the current settings for the spam classifier. One or more settings can be specified in the dictionary.  Request:  user@box:~$ curl -X POST localhost:4556/api/spam/settings -H 'Content-Type: application/json' -d '{\"enabled\":true,\"max_length\":250,\"min_length\":10,\"should_delete\":false,\"should_save\":false,\"ignore_emoji\":true,\"threshold\":80}'  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/settings"
        },
        {
            "location": "/md/web/#put-apispamsetminlenmin_length",
            "text": "set min length of message that should be checked for spam.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "PUT /api/spam/set/minlen/&lt;min_length&gt;"
        },
        {
            "location": "/md/web/#put-apispamsetmaxlenmin_length",
            "text": "set max length of message that should be checked for spam.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "PUT /api/spam/set/maxlen/&lt;min_length&gt;"
        },
        {
            "location": "/md/web/#post-apispamdisablesave",
            "text": "Disable saving of spam messages to separate 'spams' table.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/disable/save"
        },
        {
            "location": "/md/web/#post-apispamdisabledelete",
            "text": "Disable deletion of spam messages from storage backend.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/disable/delete"
        },
        {
            "location": "/md/web/#post-apispamenablesave",
            "text": "Enable saving of spam messages to separate 'spams' table.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/enable/save"
        },
        {
            "location": "/md/web/#post-apispamenabledelete",
            "text": "Enable deletion of spam messages from storage backend.  Response:  {\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "POST /api/spam/enable/delete"
        },
        {
            "location": "/md/web/#deleting-a-message-classified-as-spam",
            "text": "The  message_id  field describes the ID of the message stored in the message store. It can be deleted by using the history web API:  user@box:~$ curl -X GET localhost:4556/api/spam/3\n{\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": false,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X DELETE localhost:4556/api/history/21aa49f3-3dc5-4bef-a08d-84f7a516bf49\n{\n    \"data\": {},\n    \"message\": \"\",\n    \"status_code\": 200\n}\nuser@box:~$ curl -X GET localhost:4556/api/spam/3\n{\n    \"data\": {\n        \"correct\": true,\n        \"from_id\": \"115584\",\n        \"from_name\": \"\",\n        \"id\": 3,\n        \"message\": \"\\ud835\\udd4e\\ud835\\udd3c\\ud835\\udd4e\\ud835\\udd5a\\ud835\\udd43\\ud835\\udd43\\ud835\\udd4a\\ud835\\udd4b\\ud835\\udd3b\\ud835\\udd4c\",\n        \"message_deleted\": true,\n        \"message_id\": \"21aa49f3-3dc5-4bef-a08d-84f7a516bf49\",\n        \"object_type\": \"room\",\n        \"probability\": \"0.932408,0.98,1\",\n        \"time_stamp\": 1535309860,\n        \"to_id\": \"115584\",\n        \"to_name\": \"jkvkjvh\"\n    },\n    \"message\": \"\",\n    \"status_code\": 200\n}",
            "title": "Deleting a message classified as spam"
        },
        {
            "location": "/md/web/#probability",
            "text": "The field  probability  are percentages from three different classifiers. If at least two of them predict with a percentage of at least 66% that a message is spam, then it will be labeled as such.  The first number is from XGBoost, the second from a Random Forest, and the third SVC with a polynomial kernel. The third number is always either  0  or  1 , and never a fraction.",
            "title": "Probability"
        },
        {
            "location": "/md/events/",
            "text": "Message deleted\n\n\nWhen an admin/mod/etc. deletes a message from a room, everyone on that room will receive an event with the name \n\ngn_message_deleted\n so they can remove it locally as well.\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"object\": {\n        \"id\": \"<UUID of the message that was deleted>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the message was deleted in>\"\n    },\n    \"verb\": \"delete\",\n    \"actor\": {\n        \"id\": \"<ID of the user who deleted the message>\",\n        \"displayName\": \"<name of the user, base64>\"\n    }\n}\n\n\n\n\nMessage received\n\n\nWhen user A receives a private message, or a message from a room that user A is in, the event \nmessage\n will be sent\nto user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the sender>\",\n        \"displayName\": \"<name of the sender>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<UUID of the room, or this user's UUID if private msg>\",\n        \"displayName\": \"<name of the room, or target user name if private msg>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message body>\",\n        \"displayName\": \"<the name of the channel, or empty if private msg>\",\n        \"url\": \"<UUID of the channel for this room, or empty if private msg>\"\n    }\n}\n\n\n\n\nMessage has been read\n\n\nIf user A sends a message to user B and user B invokes the \nread\n api to indicate the message has been read, user A\nwill receive a \ngn_message_read\n event with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user id of the one sending the read receipt>\"\n    },\n    \"verb\": \"read\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}\n\n\n\n\nMessage has been delivered\n\n\nIf user A sends a message to user B and user B invokes the \nreceived\n api to indicate the message has been received,\nuser A will receive a \ngn_message_received\n event with the following content:\n\n\n{   \n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user id of the one sending the read receipt>\"\n    },\n    \"verb\": \"received\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}   \n\n\n\n\nUser info updated\n\n\nWhen a user updates his/her user information (e.g. avatar, is streaming, age etc.), the event \ngn_user_info_updated\n\nwill be sent to either all rooms that the user is in, or a specific room that user chose to send to. The event looks \nlike this:\n\n\n{\n    \"actor\": {\n        \"id\": \"997110\",\n        \"displayName\": \"YmF0bWFu\"\n    },\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"streaming\"\n        },{\n            \"content\": \"MzU=\",\n            \"objectType\": \"age\"\n        }],\n        \"objectType\": \"userInfo\"\n    },\n    \"verb\": \"update\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nThe \ncontent\n on each attachment is always base64 encoded. The \nobjectType\n tells which field has been updated. Possible\nvalues depends on implementation, but is usually same as what's returned for user info when joining a room (\ngn_join\n).\n\n\nAdmin presence requested\n\n\nWhen someone requests the presence of an admin in a room all users in the Admin room for that channel will receive an\nevent called \ngn_admin_requested\n containing the following:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user requesting>\",\n        \"displayName\": \"<name of the user requesting>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"help\",\n    \"object\": {\n        \"content\": \"<base64 encoded message>\"\n    },\n    \"generator\": {\n        \"id\": \"<UUID of the room the help was requested for>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the admin room>\",\n        \"displayName\": \"<base64 of the admin room name>\"\n    }\n}\n\n\n\n\nA room was removed\n\n\nWhen a room is removed by an admin/owner an event called \ngn_room_removed\n will be sent to everyone on the server (to\nkeep the room list in sync on client side):\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID who removed the room>\",\n        \"displayName\": \"<name of the user who removed the room, in base64>\"\n    },\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"displayName\": \"<room name in base64>\",\n        \"objectType\": \"room\"\n    },\n    \"object\": {\n        \"content\": \"<an optional reason, in base64>\"\n    },\n    \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n    \"published\": \"2016-10-07T10:45:34Z\",\n    \"verb\": \"removed\"\n}\n\n\n\n\nInvitation received\n\n\nWhen user B invites user A to join room X, the event \ngn_invitation\n will be sent to user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user B>\",\n        \"displayName\": \"<name of user B>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"invite\",\n    \"object\": {\n        \"url\": \"<UUID of the channel for room X>\",\n        \"displayName\": \"<name of the channel for room X>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}\n\n\n\n\nAnother user joins the room\n\n\nIf user A is in room X, and another user B joins room X, the server will send an event called \ngn_user_joined\n to user A\nwith the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"content\": \"globalmod,moderator\"\n        \"image\": {\n            \"url\": \"<user B's image url>\"\n        },\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"join\"\n}\n\n\n\n\nThe \nactor.content\n describes the roles this user has in this room, plus any global roles. Examples:\n\n\n\n\nglobalmod,moderator\n\n\nmoderator\n\n\nsuperuser\n\n\n\n\nIf no specific roles, the value will be blank.\n\n\nAnother user leaves room\n\n\nWhen user A is in room X, and another user B leaves room X, the sever will send an event called \ngn_user_left\n to user A\nwith the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"leave\"\n}\n\n\n\n\nAnother user connects\n\n\nWhen a user connects (or stops being invisible), the \ngn_user_connected\n event will be sent.\n\n\n{\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"verb\": \"connect\"\n}\n\n\n\n\nAnother user disconnects\n\n\nIf user A is in any room that user B is in, and user B disconnects from the chat server, an event called\n\ngn_user_disconnected\n will be sent to user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"verb\": \"disconnect\"\n}\n\n\n\n\nYou were banned\n\n\nIf you are banned, either in a room, a channel or globally, you will receive the following event named \ngn_banned\n:\n\n\n{\n    \"actor\": {\n        \"id\": \"<ID of the one who banned you>\",\n        \"displayName\": \"<username of the one who banned you, in base64>\"\n    },\n    \"object\": {\n        \"id\": \"<your user ID>\",\n        \"displayName\": \"<your username in base64>\",\n        \"summary\": \"30s\",\n        \"updated\": \"2017-02-15T09:11:52Z\",\n        \"content\": \"<the reason for the ban>\"\n    },\n    \"target\": {\n        \"id\": \"<room/channel uuid>\",\n        \"displayName\": \"<room/channel name, in base64>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\n\ntarget.id and target.displayName will not be present if target.objectType is \"global\",\n\n\nobject.summary is the duration of the ban, e.g. 30s, 2h, 7d etc.,\n\n\nobject.updated is the timestamp when the ban will expire, in UTC,\n\n\nobject.content is the reason for the ban, but if no reason is given by the banned, this field will not be present.\n\n\n\n\nA new room is created\n\n\nWhen a new room is created in a channel that user A is in, an event called \ngn_room_created\n will be sent to user A with\nthe following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user who created the room>\",\n        \"displayName\": \"<name of the user who created the room>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"url\": \"<UUID of the channel for this room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the new room>\",\n        \"displayName\": \"<name of the new room>\",\n        \"objectType\": \"temporary\"\n    },\n    \"verb\": \"create\"\n}\n\n\n\n\nThe \ntarget.objectType\n will always be \ntemporary\n since all rooms created using the API are user created rooms, meaning\nthey will be automatically removed when the owner leaves.\n\n\nA user is kicked from a room\n\n\nWhen a user is kicked from a room, an event will be sent to all users in that room (except the kicked user), called \n\ngn_user_kicked\n, with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the kicker>\",\n        \"displayName\": \"<name of the kicker>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"id\": \"<UUID of the kicked user>\",\n        \"displayName\": \"<name of the kicked user>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the user was kicked from>\",\n        \"displayName\": \"<name of the room the user was kicked from>\"\n    },\n    \"verb\": \"kick\"\n}\n\n\n\n\nBroadcast received\n\n\nWhen a message is broadcasted to every user on the server, a \ngn_broadcast\n event is received:\n\n\n{\n    \"actor\": {\n        \"displayName\": \"<admin in base64>\",\n        \"id\": \"0\" \n    },  \n    \"content\": \"<base64>\",\n    \"verb\": \"broadcast\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"provider\": {\n        \"id\": \"popp\"\n    }\n}\n\n\n\n\nA user is banned\n\n\nTODO: currently the user will be banned, but the \"kicked\" event will be broadcasted to relevant users. There's currently\nno \"banned\" event for this.",
            "title": "Events"
        },
        {
            "location": "/md/events/#message-deleted",
            "text": "When an admin/mod/etc. deletes a message from a room, everyone on that room will receive an event with the name  gn_message_deleted  so they can remove it locally as well.  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"object\": {\n        \"id\": \"<UUID of the message that was deleted>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the message was deleted in>\"\n    },\n    \"verb\": \"delete\",\n    \"actor\": {\n        \"id\": \"<ID of the user who deleted the message>\",\n        \"displayName\": \"<name of the user, base64>\"\n    }\n}",
            "title": "Message deleted"
        },
        {
            "location": "/md/events/#message-received",
            "text": "When user A receives a private message, or a message from a room that user A is in, the event  message  will be sent\nto user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the sender>\",\n        \"displayName\": \"<name of the sender>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<UUID of the room, or this user's UUID if private msg>\",\n        \"displayName\": \"<name of the room, or target user name if private msg>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message body>\",\n        \"displayName\": \"<the name of the channel, or empty if private msg>\",\n        \"url\": \"<UUID of the channel for this room, or empty if private msg>\"\n    }\n}",
            "title": "Message received"
        },
        {
            "location": "/md/events/#message-has-been-read",
            "text": "If user A sends a message to user B and user B invokes the  read  api to indicate the message has been read, user A\nwill receive a  gn_message_read  event with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user id of the one sending the read receipt>\"\n    },\n    \"verb\": \"read\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}",
            "title": "Message has been read"
        },
        {
            "location": "/md/events/#message-has-been-delivered",
            "text": "If user A sends a message to user B and user B invokes the  received  api to indicate the message has been received,\nuser A will receive a  gn_message_received  event with the following content:  {   \n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user id of the one sending the read receipt>\"\n    },\n    \"verb\": \"received\",\n    \"target\": {\n        \"id\": \"<uuid of the room the messages are all in>\" \n    },   \n    \"object\": {\n        \"attachments\": [\n            {\"id\": \"<message1 uuid>\"},\n            {\"id\": \"<message2 uuid>\"},\n            {\"id\": \"<message3 uuid>\"}\n        ]    \n    }    \n}",
            "title": "Message has been delivered"
        },
        {
            "location": "/md/events/#user-info-updated",
            "text": "When a user updates his/her user information (e.g. avatar, is streaming, age etc.), the event  gn_user_info_updated \nwill be sent to either all rooms that the user is in, or a specific room that user chose to send to. The event looks \nlike this:  {\n    \"actor\": {\n        \"id\": \"997110\",\n        \"displayName\": \"YmF0bWFu\"\n    },\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"streaming\"\n        },{\n            \"content\": \"MzU=\",\n            \"objectType\": \"age\"\n        }],\n        \"objectType\": \"userInfo\"\n    },\n    \"verb\": \"update\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}  The  content  on each attachment is always base64 encoded. The  objectType  tells which field has been updated. Possible\nvalues depends on implementation, but is usually same as what's returned for user info when joining a room ( gn_join ).",
            "title": "User info updated"
        },
        {
            "location": "/md/events/#admin-presence-requested",
            "text": "When someone requests the presence of an admin in a room all users in the Admin room for that channel will receive an\nevent called  gn_admin_requested  containing the following:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user requesting>\",\n        \"displayName\": \"<name of the user requesting>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"help\",\n    \"object\": {\n        \"content\": \"<base64 encoded message>\"\n    },\n    \"generator\": {\n        \"id\": \"<UUID of the room the help was requested for>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the admin room>\",\n        \"displayName\": \"<base64 of the admin room name>\"\n    }\n}",
            "title": "Admin presence requested"
        },
        {
            "location": "/md/events/#a-room-was-removed",
            "text": "When a room is removed by an admin/owner an event called  gn_room_removed  will be sent to everyone on the server (to\nkeep the room list in sync on client side):  {\n    \"actor\": {\n        \"id\": \"<user ID who removed the room>\",\n        \"displayName\": \"<name of the user who removed the room, in base64>\"\n    },\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"displayName\": \"<room name in base64>\",\n        \"objectType\": \"room\"\n    },\n    \"object\": {\n        \"content\": \"<an optional reason, in base64>\"\n    },\n    \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n    \"published\": \"2016-10-07T10:45:34Z\",\n    \"verb\": \"removed\"\n}",
            "title": "A room was removed"
        },
        {
            "location": "/md/events/#invitation-received",
            "text": "When user B invites user A to join room X, the event  gn_invitation  will be sent to user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user B>\",\n        \"displayName\": \"<name of user B>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"invite\",\n    \"object\": {\n        \"url\": \"<UUID of the channel for room X>\",\n        \"displayName\": \"<name of the channel for room X>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}",
            "title": "Invitation received"
        },
        {
            "location": "/md/events/#another-user-joins-the-room",
            "text": "If user A is in room X, and another user B joins room X, the server will send an event called  gn_user_joined  to user A\nwith the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"content\": \"globalmod,moderator\"\n        \"image\": {\n            \"url\": \"<user B's image url>\"\n        },\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"join\"\n}  The  actor.content  describes the roles this user has in this room, plus any global roles. Examples:   globalmod,moderator  moderator  superuser   If no specific roles, the value will be blank.",
            "title": "Another user joins the room"
        },
        {
            "location": "/md/events/#another-user-leaves-room",
            "text": "When user A is in room X, and another user B leaves room X, the sever will send an event called  gn_user_left  to user A\nwith the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"leave\"\n}",
            "title": "Another user leaves room"
        },
        {
            "location": "/md/events/#another-user-connects",
            "text": "When a user connects (or stops being invisible), the  gn_user_connected  event will be sent.  {\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"verb\": \"connect\"\n}",
            "title": "Another user connects"
        },
        {
            "location": "/md/events/#another-user-disconnects",
            "text": "If user A is in any room that user B is in, and user B disconnects from the chat server, an event called gn_user_disconnected  will be sent to user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"verb\": \"disconnect\"\n}",
            "title": "Another user disconnects"
        },
        {
            "location": "/md/events/#you-were-banned",
            "text": "If you are banned, either in a room, a channel or globally, you will receive the following event named  gn_banned :  {\n    \"actor\": {\n        \"id\": \"<ID of the one who banned you>\",\n        \"displayName\": \"<username of the one who banned you, in base64>\"\n    },\n    \"object\": {\n        \"id\": \"<your user ID>\",\n        \"displayName\": \"<your username in base64>\",\n        \"summary\": \"30s\",\n        \"updated\": \"2017-02-15T09:11:52Z\",\n        \"content\": \"<the reason for the ban>\"\n    },\n    \"target\": {\n        \"id\": \"<room/channel uuid>\",\n        \"displayName\": \"<room/channel name, in base64>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   target.id and target.displayName will not be present if target.objectType is \"global\",  object.summary is the duration of the ban, e.g. 30s, 2h, 7d etc.,  object.updated is the timestamp when the ban will expire, in UTC,  object.content is the reason for the ban, but if no reason is given by the banned, this field will not be present.",
            "title": "You were banned"
        },
        {
            "location": "/md/events/#a-new-room-is-created",
            "text": "When a new room is created in a channel that user A is in, an event called  gn_room_created  will be sent to user A with\nthe following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user who created the room>\",\n        \"displayName\": \"<name of the user who created the room>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"url\": \"<UUID of the channel for this room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the new room>\",\n        \"displayName\": \"<name of the new room>\",\n        \"objectType\": \"temporary\"\n    },\n    \"verb\": \"create\"\n}  The  target.objectType  will always be  temporary  since all rooms created using the API are user created rooms, meaning\nthey will be automatically removed when the owner leaves.",
            "title": "A new room is created"
        },
        {
            "location": "/md/events/#a-user-is-kicked-from-a-room",
            "text": "When a user is kicked from a room, an event will be sent to all users in that room (except the kicked user), called  gn_user_kicked , with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the kicker>\",\n        \"displayName\": \"<name of the kicker>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"id\": \"<UUID of the kicked user>\",\n        \"displayName\": \"<name of the kicked user>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the user was kicked from>\",\n        \"displayName\": \"<name of the room the user was kicked from>\"\n    },\n    \"verb\": \"kick\"\n}",
            "title": "A user is kicked from a room"
        },
        {
            "location": "/md/events/#broadcast-received",
            "text": "When a message is broadcasted to every user on the server, a  gn_broadcast  event is received:  {\n    \"actor\": {\n        \"displayName\": \"<admin in base64>\",\n        \"id\": \"0\" \n    },  \n    \"content\": \"<base64>\",\n    \"verb\": \"broadcast\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"provider\": {\n        \"id\": \"popp\"\n    }\n}",
            "title": "Broadcast received"
        },
        {
            "location": "/md/events/#a-user-is-banned",
            "text": "TODO: currently the user will be banned, but the \"kicked\" event will be broadcasted to relevant users. There's currently\nno \"banned\" event for this.",
            "title": "A user is banned"
        },
        {
            "location": "/md/external_events/",
            "text": "External events are activity streams send to the configured external queue (e.g. RabbitMQ).\n\n\nUser was kicked from a room\n\n\nExample of activity posted to the external queue:\n\n\n{\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"id\": \"197114\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"kick\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\n\nactor.id: ID of the user who kicked, or 0 if from admin interface,\n\n\nactor.displayName: name of the user who kicked, or admin if from admin interface,\n\n\nobject.id: ID of the user who got kicked,\n\n\nobject.content: base64 encoded \"reason\" for the kick (optional),\n\n\nobject.displayName: base64 encoded username of the user was kicked,\n\n\ntarget.id: UUID of the room the user was kicked from,\n\n\ntarget.displayName: base64 encoded name of the room.\n\n\n\n\nUser used a blacklisted word\n\n\n{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\",\n        \"summary\": \"ZnVjaw==\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"blacklisted\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\n\ntarget.displayName: name of the room the message was sent in,\n\n\ntarget.id: uuid of the room the message was sent in,\n\n\nactor.id: id of the user who sent the message,\n\n\nactor.displayName: username of the user who sent the message,\n\n\nobject.content: the full message that was sent,\n\n\nobject.summary: the forbidden word that was used.\n\n\n\n\nUser send a message that got classified as a spam message\n\n\n{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"spam\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\n\ntarget.displayName: name of the room the message was sent in,\n\n\ntarget.id: uuid of the room the message was sent in,\n\n\nactor.id: id of the user who sent the message,\n\n\nactor.displayName: username of the user who sent the message,\n\n\nobject.content: the full message that was sent,\n\n\n\n\nUser was banned\n\n\nExample of activity posted to the external queue:\n\n\n{\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"id\": \"1234\",\n        \"summary\": \"5m\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"updated\": \"2016-12-22T07:13:09Z\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"objectType\": \"room\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\n\nactor.id: ID of the user who banned, or 0 if from admin interface,\n\n\nactor.displayName: name of the user who banned, or admin if from admin interface,\n\n\nobject.id: ID of the user who got banned,\n\n\nobject.displayName: base64 encoded username of the user was banned,\n\n\nobject.content: base64 encoded \"reason\" for the ban (optional),\n\n\nobject.summary: the ban duration,\n\n\nobject.updated: the datetime when the ban will expire (in UTC),\n\n\ntarget.id: UUID of the room the user was kicked from,\n\n\ntarget.displayName: base64 encoded name of the room,\n\n\ntarget.objectType: one of \"room\", \"channel\", \"global\" (if \"global\", no displayName or id will be on target)\n\n\n\n\nServer restarted\n\n\nWhen the server REST node starts up it will sent a \nrestart\n event in this format: \n\n\n{\n    \"verb\": \"restart\",\n    \"id\": \"c694ddc3-1b2b-4d43-ae5a-a843c2dce8aa\",\n    \"published\": \"2017-06-09T07:26:26Z\"\n}\n\n\n\n\nUser joins room\n\n\nWhen a user joins a room the following activity is published to rabbitmq:\n\n\n{\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"membership\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"image\"\n        }, {\n            \"content\": \"bQ==\",\n            \"objectType\": \"gender\"\n        }, {\n            \"content\": \"NzA=\",\n            \"objectType\": \"age\"\n        }, {\n            \"content\": \"c2hhbmdoYWk=\",\n            \"objectType\": \"city\"\n        }, {\n            \"content\": \"Y24=\",\n            \"objectType\": \"country\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"fake_checked\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"has_webcam\"\n        }]\n    },\n    \"target\": {\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\"\n    },\n    \"id\": \"bfa26b43-492f-4ec9-a83e-32e64ba2bc51\",\n    \"actor\": {\n        \"displayName\": \"YXNvZGZpaGFzZG9maWg=\",\n        \"id\": \"385280\",\n        \"image\": {\n            \"url\": \"n\"\n        }\n    },\n    \"published\": \"2017-01-04T09:58:37Z\",\n    \"verb\": \"join\"\n}\n\n\n\n\nUser ban was removed\n\n\nExample of activity when a user's ban was manually removed in the admin interface:\n\n\n{\n    \"actor\": {\n        \"id\": \"0\",\n        \"displayName\": \"YWRtaW4=\"\n    },\n    \"target\": {\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"objectType\": \"room\"\n    },\n    \"published\": \"2017-01-03T05:50:11Z\",\n    \"verb\": \"unban\",\n    \"id\": \"49b067bb-79fe-48bd-9c03-dc4fd8f60192\",\n    \"object\": {\n        \"id\": \"124352\",\n        \"displayName\": \"Zm9vYmFyenoyMw==\"\n    }\n}\n\n\n\n\n\n\ntarget.id: room ID or channel ID\n\n\ntarget.objectType: \"room\", \"channel\" or \"global\"\n\n\nobject.id: ID of the user\n\n\nobject.displayName: name fo the user\n\n\n\n\nIf \ntarget.objectType\n is \nglobal\n then no \ntarget.id\n or \ntarget.displayName\n will be included.\n\n\nUser sends a message to a room/user\n\n\nWhenever a user sends a message an event will be published to the configured MQ, so another system can analyze activity\nlevel of users. Example activity: \n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"send\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nOne session has ended\n\n\nMultiple session can exist for a single user. A disconnect event is only sent when the last session has been closed, but a \"session closed\" event is sent for each session that is closed. Example activity:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\",\n        \"content\": \"<session UUID>\"\n    },\n    \"verb\": \"ended\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nUser successfully logged in\n\n\nExample of activity when a user successfully logs in:\n\n\n{\n    \"id\": \"2190e4b9-6b80-4d86-992f-e107ae19be96\",\n    \"title\": \"dino.wio.login\",\n    \"actor\": {\n        \"id\": \"1971\",\n        \"attachments\": [{\n            \"objectType\": \"lon\",\n            \"content\": \"11.11667\"\n        }, {\n            \"objectType\": \"lat\",\n            \"content\": \"59.23891\"\n        }, {\n            \"objectType\": \"city\",\n            \"content\": \"Berlin\"\n        }, {\n            \"objectType\": \"membership\",\n            \"content\": \"vip\"\n        }, {\n            \"objectType\": \"is_streaming\",\n            \"content\": \"False\"\n        }, {\n            \"objectType\": \"fakecheck\",\n            \"content\": \"1\"\n        }, {\n            \"objectType\": \"country\",\n            \"content\": \"Germany\"\n        }, {\n            \"objectType\": \"gender\",\n            \"content\": \"m\"\n        }, {\n            \"objectType\": \"user_agent\",\n            \"content\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36\"\n        }, {\n            \"objectType\": \"age\",\n            \"content\": \"65\"\n        }, {\n            \"objectType\": \"search_gender\",\n            \"content\": \"a,b\"\n        }, {\n            \"objectType\": \"avatar\",\n            \"content\": \"http://img.example.com/m/avatar/19/1/f6/3/71-B833EE35D296C9BE_300_sq.jpg\"\n        }, {\n            \"objectType\": \"region\",\n            \"content\": \"Berlin\"\n        }, {\n            \"objectType\": \"user_agent_platform\",\n            \"content\": \"linux\"\n        }, {\n            \"objectType\": \"user_agent\",\n            \"content\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36\"\n        }, {\n            \"objectType\": \"user_agent_browser\",\n            \"content\": \"chrome\"\n        }, {\n            \"objectType\": \"user_agent_language\",\n            \"content\": \"\"\n        }, {\n            \"objectType\": \"user_agent_version\",\n            \"content\": \"63.0.3239.108\"\n        }],\n        \"displayName\": \"Um9iYnk=\",\n        \"content\": \"<session UUID>\"\n    },\n    \"provider\": {\n        \"id\": \"wioenv\"\n    },\n    \"verb\": \"login\",\n    \"published\": \"2018-09-17T05:25:38Z\"\n}\n\n\n\n\nA user was reported for a message he/she sent\n\n\nA message may be reported in the front-end, and a report will be published to the MQ. The event looks like this:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID that reported the message>\",\n        \"displayName\": \"<the user name who reported the message>\"\n    },\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\",\n        \"displayName\": \"<the user name of the reported user>\"\n    },\n    \"verb\": \"report\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nUser disconnected\n\n\nExample of activity when a user disconnects:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"disconnect\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nUser becomes invisible\n\n\nWhen a user changes the status to become invisible the following event is published to the external queue:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"actor\": {\n        \"id\": \"635328\",\n        \"displayName\": \"amtia2prYmJrag==\"\n    },\n    \"verb\": \"invisible\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\nUser becomes visible after being in visible\n\n\nWhen a user changes his status to become visible again after being invisible the following event is sent to the external queue:\n\n\n{   \n    \"id\": \"<server-generated UUID>\",\n    \"actor\": {\n        \"id\": \"635328\",\n        \"displayName\": \"amtia2prYmJrag==\"\n    },  \n    \"verb\": \"online\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "External Events"
        },
        {
            "location": "/md/external_events/#user-was-kicked-from-a-room",
            "text": "Example of activity posted to the external queue:  {\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"id\": \"197114\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"kick\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   actor.id: ID of the user who kicked, or 0 if from admin interface,  actor.displayName: name of the user who kicked, or admin if from admin interface,  object.id: ID of the user who got kicked,  object.content: base64 encoded \"reason\" for the kick (optional),  object.displayName: base64 encoded username of the user was kicked,  target.id: UUID of the room the user was kicked from,  target.displayName: base64 encoded name of the room.",
            "title": "User was kicked from a room"
        },
        {
            "location": "/md/external_events/#user-used-a-blacklisted-word",
            "text": "{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\",\n        \"summary\": \"ZnVjaw==\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"blacklisted\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   target.displayName: name of the room the message was sent in,  target.id: uuid of the room the message was sent in,  actor.id: id of the user who sent the message,  actor.displayName: username of the user who sent the message,  object.content: the full message that was sent,  object.summary: the forbidden word that was used.",
            "title": "User used a blacklisted word"
        },
        {
            "location": "/md/external_events/#user-send-a-message-that-got-classified-as-a-spam-message",
            "text": "{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"spam\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   target.displayName: name of the room the message was sent in,  target.id: uuid of the room the message was sent in,  actor.id: id of the user who sent the message,  actor.displayName: username of the user who sent the message,  object.content: the full message that was sent,",
            "title": "User send a message that got classified as a spam message"
        },
        {
            "location": "/md/external_events/#user-was-banned",
            "text": "Example of activity posted to the external queue:  {\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"id\": \"1234\",\n        \"summary\": \"5m\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"updated\": \"2016-12-22T07:13:09Z\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"objectType\": \"room\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   actor.id: ID of the user who banned, or 0 if from admin interface,  actor.displayName: name of the user who banned, or admin if from admin interface,  object.id: ID of the user who got banned,  object.displayName: base64 encoded username of the user was banned,  object.content: base64 encoded \"reason\" for the ban (optional),  object.summary: the ban duration,  object.updated: the datetime when the ban will expire (in UTC),  target.id: UUID of the room the user was kicked from,  target.displayName: base64 encoded name of the room,  target.objectType: one of \"room\", \"channel\", \"global\" (if \"global\", no displayName or id will be on target)",
            "title": "User was banned"
        },
        {
            "location": "/md/external_events/#server-restarted",
            "text": "When the server REST node starts up it will sent a  restart  event in this format:   {\n    \"verb\": \"restart\",\n    \"id\": \"c694ddc3-1b2b-4d43-ae5a-a843c2dce8aa\",\n    \"published\": \"2017-06-09T07:26:26Z\"\n}",
            "title": "Server restarted"
        },
        {
            "location": "/md/external_events/#user-joins-room",
            "text": "When a user joins a room the following activity is published to rabbitmq:  {\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"membership\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"image\"\n        }, {\n            \"content\": \"bQ==\",\n            \"objectType\": \"gender\"\n        }, {\n            \"content\": \"NzA=\",\n            \"objectType\": \"age\"\n        }, {\n            \"content\": \"c2hhbmdoYWk=\",\n            \"objectType\": \"city\"\n        }, {\n            \"content\": \"Y24=\",\n            \"objectType\": \"country\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"fake_checked\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"has_webcam\"\n        }]\n    },\n    \"target\": {\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\"\n    },\n    \"id\": \"bfa26b43-492f-4ec9-a83e-32e64ba2bc51\",\n    \"actor\": {\n        \"displayName\": \"YXNvZGZpaGFzZG9maWg=\",\n        \"id\": \"385280\",\n        \"image\": {\n            \"url\": \"n\"\n        }\n    },\n    \"published\": \"2017-01-04T09:58:37Z\",\n    \"verb\": \"join\"\n}",
            "title": "User joins room"
        },
        {
            "location": "/md/external_events/#user-ban-was-removed",
            "text": "Example of activity when a user's ban was manually removed in the admin interface:  {\n    \"actor\": {\n        \"id\": \"0\",\n        \"displayName\": \"YWRtaW4=\"\n    },\n    \"target\": {\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"objectType\": \"room\"\n    },\n    \"published\": \"2017-01-03T05:50:11Z\",\n    \"verb\": \"unban\",\n    \"id\": \"49b067bb-79fe-48bd-9c03-dc4fd8f60192\",\n    \"object\": {\n        \"id\": \"124352\",\n        \"displayName\": \"Zm9vYmFyenoyMw==\"\n    }\n}   target.id: room ID or channel ID  target.objectType: \"room\", \"channel\" or \"global\"  object.id: ID of the user  object.displayName: name fo the user   If  target.objectType  is  global  then no  target.id  or  target.displayName  will be included.",
            "title": "User ban was removed"
        },
        {
            "location": "/md/external_events/#user-sends-a-message-to-a-roomuser",
            "text": "Whenever a user sends a message an event will be published to the configured MQ, so another system can analyze activity\nlevel of users. Example activity:   {\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"send\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User sends a message to a room/user"
        },
        {
            "location": "/md/external_events/#one-session-has-ended",
            "text": "Multiple session can exist for a single user. A disconnect event is only sent when the last session has been closed, but a \"session closed\" event is sent for each session that is closed. Example activity:  {\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\",\n        \"content\": \"<session UUID>\"\n    },\n    \"verb\": \"ended\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "One session has ended"
        },
        {
            "location": "/md/external_events/#user-successfully-logged-in",
            "text": "Example of activity when a user successfully logs in:  {\n    \"id\": \"2190e4b9-6b80-4d86-992f-e107ae19be96\",\n    \"title\": \"dino.wio.login\",\n    \"actor\": {\n        \"id\": \"1971\",\n        \"attachments\": [{\n            \"objectType\": \"lon\",\n            \"content\": \"11.11667\"\n        }, {\n            \"objectType\": \"lat\",\n            \"content\": \"59.23891\"\n        }, {\n            \"objectType\": \"city\",\n            \"content\": \"Berlin\"\n        }, {\n            \"objectType\": \"membership\",\n            \"content\": \"vip\"\n        }, {\n            \"objectType\": \"is_streaming\",\n            \"content\": \"False\"\n        }, {\n            \"objectType\": \"fakecheck\",\n            \"content\": \"1\"\n        }, {\n            \"objectType\": \"country\",\n            \"content\": \"Germany\"\n        }, {\n            \"objectType\": \"gender\",\n            \"content\": \"m\"\n        }, {\n            \"objectType\": \"user_agent\",\n            \"content\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36\"\n        }, {\n            \"objectType\": \"age\",\n            \"content\": \"65\"\n        }, {\n            \"objectType\": \"search_gender\",\n            \"content\": \"a,b\"\n        }, {\n            \"objectType\": \"avatar\",\n            \"content\": \"http://img.example.com/m/avatar/19/1/f6/3/71-B833EE35D296C9BE_300_sq.jpg\"\n        }, {\n            \"objectType\": \"region\",\n            \"content\": \"Berlin\"\n        }, {\n            \"objectType\": \"user_agent_platform\",\n            \"content\": \"linux\"\n        }, {\n            \"objectType\": \"user_agent\",\n            \"content\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36\"\n        }, {\n            \"objectType\": \"user_agent_browser\",\n            \"content\": \"chrome\"\n        }, {\n            \"objectType\": \"user_agent_language\",\n            \"content\": \"\"\n        }, {\n            \"objectType\": \"user_agent_version\",\n            \"content\": \"63.0.3239.108\"\n        }],\n        \"displayName\": \"Um9iYnk=\",\n        \"content\": \"<session UUID>\"\n    },\n    \"provider\": {\n        \"id\": \"wioenv\"\n    },\n    \"verb\": \"login\",\n    \"published\": \"2018-09-17T05:25:38Z\"\n}",
            "title": "User successfully logged in"
        },
        {
            "location": "/md/external_events/#a-user-was-reported-for-a-message-heshe-sent",
            "text": "A message may be reported in the front-end, and a report will be published to the MQ. The event looks like this:  {\n    \"actor\": {\n        \"id\": \"<user ID that reported the message>\",\n        \"displayName\": \"<the user name who reported the message>\"\n    },\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\",\n        \"displayName\": \"<the user name of the reported user>\"\n    },\n    \"verb\": \"report\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "A user was reported for a message he/she sent"
        },
        {
            "location": "/md/external_events/#user-disconnected",
            "text": "Example of activity when a user disconnects:  {\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"disconnect\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User disconnected"
        },
        {
            "location": "/md/external_events/#user-becomes-invisible",
            "text": "When a user changes the status to become invisible the following event is published to the external queue:  {\n    \"id\": \"<server-generated UUID>\",\n    \"actor\": {\n        \"id\": \"635328\",\n        \"displayName\": \"amtia2prYmJrag==\"\n    },\n    \"verb\": \"invisible\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User becomes invisible"
        },
        {
            "location": "/md/external_events/#user-becomes-visible-after-being-in-visible",
            "text": "When a user changes his status to become visible again after being invisible the following event is sent to the external queue:  {   \n    \"id\": \"<server-generated UUID>\",\n    \"actor\": {\n        \"id\": \"635328\",\n        \"displayName\": \"amtia2prYmJrag==\"\n    },  \n    \"verb\": \"online\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User becomes visible after being in visible"
        },
        {
            "location": "/md/acl/",
            "text": "Access Control Lists\n\n\nAvailable \nacl_type\ns\n\n\n\n\nage\n\n\ngender\n\n\nmembership\n\n\ngroup\n\n\ncountry\n\n\ncity\n\n\nimage\n\n\nhas_webcam\n\n\nfake_checked\n\n\nowner\n\n\nadmin\n\n\nroom_owner\n\n\nmoderator\n\n\nsuperuser\n\n\ncrossroom\n\n\nsamechannel\n\n\nsameroom\n\n\ndisallow\n\n\ncustom\n\n\n\n\nFor custom, see \nCustom ACL Pattern\n below.\n\n\nAvailable \nactions\n\n\nFor rooms, the actions are:\n\n\n\n\njoin\n\n\nsetacl\n\n\nhistory\n\n\ncreate\n\n\nlist\n\n\nkick\n\n\nmessage\n\n\ncrossroom\n\n\nban\n\n\nautojoin\n\n\n\n\nAnd for channels:\n\n\n\n\ncreate\n\n\nsetacl\n\n\nlist\n\n\ncreate\n\n\nmessage\n\n\ncrossroom\n\n\nban\n\n\nwhisper\n\n\n\n\nCustom ACL Pattern\n\n\nA custom ACL pattern may be set instead of the regular simple ACL types. A simple grammar exists to specify this.\n\n\nGrammar\n\n\n|   OR\n,   AND\n!   NOT\n=   VALUE\n()  GROUP\n\n\n\n\n\nAND has preference over OR,\n\n\nGROUP can be used to combine grammars,\n\n\nNested parentheses are NOT allowed.\n\n\n\n\nSince AND has preference over OR, two or more OR clauses can be grouped using parentheses so avoid an AND clause taking\nover, same as with boolean logic:\n\n\na: true\nb: false\nc: true\n\na & b | c => false          age=35,gender=f|membership=normal\nb & (b | c) => true         age=35,(gender=f|membership=normal)\n\n\n\nExamples\n\n\nEither the user is 35 years or older, OR the user is a female and less than (or equal to) 26 years old:\n\n\nage=35:|gender=f,age:26\n\n\n\nParenthesis may be used to group or clauses before and clauses (since AND has priority before OR), as in this example,\n if the user is a female or above the age of 35 (inclusive) he/she will be allowed to join, as long as he/she ALSO is\n NOT a normal account.\n\n\n(age=35:|gender=f),membership=!normal\n\n\n\nCompare with the same without parenthesis, where the AND would take priority over the OR; as long as the user is above\n35 (inclusive) he/she'll be allowed to join. If less than 35, he/she can still join if BOTH female and NOT normal \naccount.\n\n\nage=35:|gender=f,membership=!normal\n\n\n\nFor some channels, maybe females should not be allowed to list the rooms, unless they have the \npaying\n membership type.\nIn this case we can negate the values to allow everything except the specified one. Everyone else can list and join:\n\n\ngender=!f|gender=f,membership=paying",
            "title": "ACL"
        },
        {
            "location": "/md/acl/#access-control-lists",
            "text": "",
            "title": "Access Control Lists"
        },
        {
            "location": "/md/acl/#available-acl_types",
            "text": "age  gender  membership  group  country  city  image  has_webcam  fake_checked  owner  admin  room_owner  moderator  superuser  crossroom  samechannel  sameroom  disallow  custom   For custom, see  Custom ACL Pattern  below.",
            "title": "Available acl_types"
        },
        {
            "location": "/md/acl/#available-actions",
            "text": "For rooms, the actions are:   join  setacl  history  create  list  kick  message  crossroom  ban  autojoin   And for channels:   create  setacl  list  create  message  crossroom  ban  whisper",
            "title": "Available actions"
        },
        {
            "location": "/md/acl/#custom-acl-pattern",
            "text": "A custom ACL pattern may be set instead of the regular simple ACL types. A simple grammar exists to specify this.",
            "title": "Custom ACL Pattern"
        },
        {
            "location": "/md/acl/#grammar",
            "text": "|   OR\n,   AND\n!   NOT\n=   VALUE\n()  GROUP   AND has preference over OR,  GROUP can be used to combine grammars,  Nested parentheses are NOT allowed.   Since AND has preference over OR, two or more OR clauses can be grouped using parentheses so avoid an AND clause taking\nover, same as with boolean logic:  a: true\nb: false\nc: true\n\na & b | c => false          age=35,gender=f|membership=normal\nb & (b | c) => true         age=35,(gender=f|membership=normal)",
            "title": "Grammar"
        },
        {
            "location": "/md/acl/#examples",
            "text": "Either the user is 35 years or older, OR the user is a female and less than (or equal to) 26 years old:  age=35:|gender=f,age:26  Parenthesis may be used to group or clauses before and clauses (since AND has priority before OR), as in this example,\n if the user is a female or above the age of 35 (inclusive) he/she will be allowed to join, as long as he/she ALSO is\n NOT a normal account.  (age=35:|gender=f),membership=!normal  Compare with the same without parenthesis, where the AND would take priority over the OR; as long as the user is above\n35 (inclusive) he/she'll be allowed to join. If less than 35, he/she can still join if BOTH female and NOT normal \naccount.  age=35:|gender=f,membership=!normal  For some channels, maybe females should not be allowed to list the rooms, unless they have the  paying  membership type.\nIn this case we can negate the values to allow everything except the specified one. Everyone else can list and join:  gender=!f|gender=f,membership=paying",
            "title": "Examples"
        },
        {
            "location": "/md/rest/",
            "text": "GET /acl\n\n\nRetrieve all ACLs for all non-temporary rooms in all channels.\n\n\nExample response:\n\n\n{\n    \"data\": {\n        \"status\": \"OK\",\n        \"data\": {\n            \"0efd8a52-7220-4160-88fe-68a15d470d95\": [{\n                \"type\": \"admin\",\n                \"action\": \"join\",\n                \"value\": \"\"\n            }, {\n                \"type\": \"admin\",\n                \"action\": \"list\",\n                \"value\": \"\"\n            }],\n            \"a81e4726-784a-11e9-bbdd-bbfdfd886868\": [{\n                \"type\": \"gender\",\n                \"action\": \"autojoin\",\n                \"value\": \"m,f\"\n            }]\n        }\n    },\n    \"status_code\": 200\n}\n\n\n\n\nPOST /acl\n\n\nRequest:\n\n\n{\n    \"room_id\": \"a81e4726-784a-11e9-bbdd-bbfdfd886868\",\n    \"action\": \"autojoin\",\n    \"acl_type\": \"gender\",\n    \"acl_value\": \"age=35,(gender=f|membership=normal)\"\n}\n\n\n\n\nFor more examples on the format of the \nacl_value\n field, see the \nACL\n section. \n\n\nResponse:\n\n\n{\n    \"data\": {\n        \"status\": \"OK\"\n    }, \n    \"status_code\": 200\n}\n\n\n\n\nGET /history\n\n\nRequest contains info on what time slice, target, origin to get history for:\n\n\n    {\n        \"from_time\": \"2016-12-26T08:39:54Z\",\n        \"to_time\": \"2016-12-28T08:39:54Z\",\n        \"user_id\": \"124352\",\n        \"room_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\" # optional\n    }\n\n\n\n\nResponse would be something similar to the following:\n\n\n    {\n        \"status_code\": 200,\n        \"data\": [{\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:33Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"37db81f2-4e16-4076-b759-8ce1c23a364e\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"aG93IGFyZSB5b3U/\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }, {\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:31Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"416d3c60-7197-471c-a706-7dbeca090d11\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"aGVsbG8gdGhlcmU=\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }, {\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:16Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"91655457-3712-4c2f-b6f2-c3b0f8be29e5\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"ZmRzYQ==\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }]\n    }\n\n\n\n\n\n\nIf neither \nfrom_time\n nor \nto_time\n is specified, the last 7 days will be used as limit,\n\n\nIf \nfrom_time\n is specified but no \nto_time\n, \nto_time\n will be \nfrom_time + 7 days\n,\n\n\nIf \nto_time\n is specified but no \nfrom_time\n, \nfrom_time\n will be \nto_time - 7 days\n,\n\n\nEither \nuser_id\n or \nroom_id\n is required (both can be specified at the same time),\n\n\nto_time\n needs to be after \nfrom_time\n.\n\n\n\n\nPOST /heartbeat\n\n\nFor mobile clients, it is sometimes tricky to maintain a constant connection due to fluctuations in network quality \nand data loss. To keep a user in an online state without keeping a connection open, the \n/heartbeat\n api can be used\ninstead.\n\n\nWith regular \n/heartbeat\n calls, a user will not be marked as offline until no more heartbeats are being received.\n\n\nMultiple user IDs can be batched together into a single \n/heartbeat\n call.\n\n\nRequest:\n\n\n[\n    \"<user ID 1>\",\n    \"<user ID 2>\",\n    \"<user ID n>\"\n]\n\n\n\n\nResponse:\n\n\n{\n    \"data\": {\n        \"status\": \"OK\"\n    }, \n    \"status_code\": 200\n}\n\n\n\n\nPOST /full-history\n\n\nTo get all messages sent by a user, call this endpoint with the following data:\n\n\n{\n    \"user_id\": 1971\n    \"from_time\": \"2016-12-26T08:39:54Z\", # optional (other needed if this one is specified)\n    \"to_time\": \"2016-12-28T08:39:54Z\" # optional  (other needed if this one is specified)\n}\n\n\n\n\nResponse looks like this:\n\n\n{\n    \"status_code\": 200,\n    \"data\": [{\n        \"message_id\": \"07bacdd8-42e6-4ace-acee-8d200dd14bfc\",\n        \"from_user_id\": \"1971\",\n        \"from_user_name\": \"Um9k=\",\n        \"target_id\": \"7935a673-da64-4419-818b-e6e0d1864b61\",\n        \"target_name\": \"TG9iYnk=\",\n        \"body\": \"eyJtYXNrIjoiMDAiLCJ6IjE2IiwidGV4dCI6ImkgYW0gaW52aXNpYmxlIn0=\",\n        \"domain\": \"room\",\n        \"channel_id\": \"84ec4b4f-7482-48ba-83a1-9c9b1c470903\",\n        \"channel_name\": \"UGVu\",\n        \"timestamp\": \"2017-05-23T07:32:07Z\",\n        \"deleted\": true\n    }, {...}]\n}\n\n\n\n\nPOST /broadcast\n\n\nBroadcasts a message to everyone on the server. Request needs the \nbody\n and \nverb\n keys:\n\n\n{\n    \"body\": \"aGkgdGhlcmU=\",\n    \"verb\": \"broadcast\"\n}\n\n\n\nBody needs to be in base64. The verb may be anything, it's up to clients to handle it.\n\n\nPOST /blacklist\n\n\nAdd a new word to the blacklist. Encode the word in base64 first, then post a request on the following format:\n\n\n{\n    \"word\": \"YmFkd29yZA==\"\n}\n\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nDELETE /blacklist\n\n\nRemove a matching word from the blacklist. Encode the word in base64 first, then post a request on the following format:\n\n\n{\n    \"word\": \"YmFkd29yZA==\"\n}\n\n\n\nThe sent word will be compared lowercase to find  matching lowercased word in the blacklist and remove all words with\nand exact match (when both lowercase).\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nPOST /set-admin\n\n\nSet a user as a global moderator.\n\n\nRequest contains user ID and the user's name (in case the user doesn't exist):\n\n\n{\n    \"id\": \"1234\",\n    \"name\": \"myuser\"\n}\n\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nOr if any errors:\n\n\n{\n    \"data\": \"no name parameter in request\", \n    \"status_code\": 500\n}\n\n\n\nPOST /remove-admin\n\n\nRemove global moderator status for a user.\n\n\nRequest contains the user's ID only:\n\n\n{\n    \"id\": \"1234\"\n}\n\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nOr if any errors:\n\n\n{\n    \"data\": \"no id parameter in request\", \n    \"status_code\": 500\n}\n\n\n\nPOST /ban\n\n\nRequest contains info on who to ban where. For banning globally:\n\n\n{\n    \"1234\": {\n        \"duration\": \"24h\",\n        \"reason\": \"<optional base64 encoded free-text>\",\n        \"admin_id\": \"<id of user banning (must already exist), or leave empty for default>\",\n        \"type\": \"global\",\n        \"name\": \"<username in base64, optional>\"\n    }\n}\n\n\n\nCan also ban multiple users at the same time:\n\n\n{\n    \"<user id>\": {\n        \"duration\": \"24h\",\n        \"type\": \"global\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\",\n        \"name\": \"<username in base64, optional>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"10m\",\n        \"target\": \"<channel uuid>\",\n        \"type\": \"channel\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"7d\",\n        \"target\": \"<room uuid>\",\n        \"type\": \"room\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    }\n}\n\n\n\nThe \nname\n field must be base64 encoded. The field is also optional and is only used if a ban request is received for \na user that doesn't exist on the server, e.g. if the user never logged in before it will not exist. If the name is \nnot specified and the user has to be created before banning, the user ID will be set as the name (later when the user \nlogin the real username will overwrite this).\n\n\nThe \nreason\n field must be base64 encoded. If the \nadmin_id\n field is specified it will be used, if not the default ID\n\n0\n will be used (the default admin user).\n\n\nDuration is an integer followed by a char for the unit, which can be one of \nd\n, \nh\n, \nm\n, \ns\n (days, hours, minutes, \nseconds). Negative or 0 durations are not allowed.\n\n\nWhen type is set to \nglobal\n, no target is specified (meaning user is banned from the whole chat server).\n\n\nResponse will be something like the following (if failure):\n\n\n{\n    \"status\": \"FAIL\",\n    \"message\": \"missing target id for user id <user id> and request <the request json>\"\n}\n\n\n\nThe banning is done async so if any of the provided user bans has invalid parameters the response will only tell you the\nfirst non-valid parameter and for which user ID.\n\n\nFor success the response looks like this:\n\n\n{\n    \"status\": \"OK\"\n}\n\n\n\nPOST /kick\n\n\nRequest contains:\n\n\n{\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    }\n}\n\n\n\nThe \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.\n\n\nResponse will be something like the following:\n\n\n{\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}\n\n\n\nGET /roles\n\n\nRequest contains a list of user IDs, e.g.:\n\n\n{\n    \"users\": [\n        \"124352\",\n        \"5678\"\n    ]\n}\n\n\n\nResponse would be something similar to the following:\n\n\n{\n    \"data\": {\n        \"124352\": {\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": [\n                    \"moderator\"\n                ],\n                \"bb0ea500-cd94-11e6-b178-8323deb605bf\": [\n                    \"owner\"\n                ]\n            },\n            \"channel\": {\n                \"dedf878e-b25d-4713-8058-20c6f0547c59\": [\n                    \"admin\", \n                    \"owner\"\n                ]\n            },\n            \"global\": [\n                \"superuser\",\n                \"globalmod\"\n            ]\n        },\n        \"5678\": {\n            \"room\": {},\n            \"channel\": {},\n            \"global\": []\n        }\n    },\n    \"status_code\": 200\n}\n\n\n\nPossible roles are:\n\n\n\n\nglobal superuser (superuser)\n\n\nglobal moderator (globalmod)\n\n\nchannel owner (owner)\n\n\nchannel admin (admin)\n\n\nroom owner (owner)\n\n\nroom moderator (moderator)\n\n\n\n\nThe only difference between global superusers and global moderators is that global superusers can also remove static \nrooms.\n\n\nGET /rooms-for-users\n\n\nRequest contains a list of user IDs, e.g.:\n\n\n{\n    \"users\": [\n        \"1234\",\n        \"5678\"\n    ]\n}\n\n\n\nResponse would be all rooms each user is currently in (room names and channel names are base64 encoded):\n\n\n{\n    \"1234\": [{\n        \"room_id\": \"efeca2fe-ba93-11e6-bc9a-4f6f56293063\",\n        \"room_name\": \"b2gsIHNvIHlvdSBhY3R1YWxseSBjaGVja2VkIHdoYXQgaXMgd2FzPw==\",\n        \"channel_id\": \"fb843140-ba93-11e6-b178-97f0297a6d4d\",\n        \"channel_name\": \"dG9tIGlzIGEgZnJlbmNoIG1hZG1hbg==\"\n    }],\n    \"5678\": [{\n        \"room_id\": \"ca1dc3b4-ba93-11e6-b835-7f1d961023a1\",\n        \"room_name\": \"cmVhZCB1cCBvbiBoeXBlcmxvZ2xvZysr\",\n        \"channel_id\": \"f621fcaa-ba93-11e6-8590-bfe35ff80c03\",\n        \"channel_name\": \"YSByZWRidWxsIGEgZGF5IGtlZXBzIHRoZSBzYW5kbWFuIGF3YXk=\"\n    }]\n}\n\n\n\nPOST /delete-messages\n\n\nUsed to delete ALL messages for a specific user ID.\n\n\nRequest body looks like this:\n\n\n{\n    \"id\": \"<user ID>\"\n}\n\n\n\nExample response:\n\n\n{\n    \"status_code\": 200, \n    \"data\": {\n        \"success\": 4, \n        \"failed\": 0,\n        \"total\": 4\n    }\n}\n\n\n\nOr if other kinds of failures:\n\n\n{\n    \"status_code\": 500, \n    \"data\": \"<error message, e.g. 'no id parameter in request'>\"\n}\n\n\n\nGET /banned\n\n\nNo data required in request.\n\n\nResponse is all banned users, separated by channel, room and globally. Example response:\n\n\n    {\n        \"channels\": {},\n        \"global\": {\n            \"185626\": {\n                \"name\": \"bHVlbA==\",\n                \"duration\": \"1h\",\n                \"timestamp\": \"2016-12-05T03:50:24Z\"\n            }\n        },\n        \"rooms\": {\n            \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                \"name\": \"Y29vbCBndXlz\",\n                \"users\": {\n                    \"101108\": {\n                        \"name\": \"bHVlbA==\",\n                        \"duration\": \"30m\",\n                        \"timestamp\": \"2016-12-05T03:20:24Z\"\n                    }\n                }\n            }\n        }\n    }\n\n\n\n\nThe \"timestamp\" in the response is the UTC timestamp for when the ban will expire. Names or channels, rooms and users\nare all base64 encoded. The dictionary keys for \"rooms\" are the UUIDs of the rooms, same for channels, while for users\nit's their user IDs as keys. The bans for \"global\" have no separation by room/channel IDs, and no \"name\" or \"users\" \nkeys.\n\n\nPOST /status\n\n\nSet the online status or visibility status of a user.\n\n\nRequest contains:\n\n\n{   \n    \"id\": \"<user ID>\",\n    \"status\": \"<one of online/offline/invisible/visible>\"\n}   \n\n\n\n\nExample response:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nPOST /send\n\n\nRequest contains:\n\n\n{   \n    \"id\": \"<user ID>\",\n    \"user_name\": \"<username, in base64>\",\n    \"object_type\": \"<room/private>\",\n    \"target_id\": \"<user ID to send to or UUID of room to send to>\",\n    \"target_name\": \"<the name of the user/room to send to, in base64>\",\n    \"content\": \"<the body to send, in base64>\"\n}   \n\n\n\n\nExample response:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\n\nUser/room will get something similar to this in a \nmessage\n event:\n\n\n{\n    \"id\": \"1d805e18-a773-11e8-a65f-8b33c55c9e1b\",\n    \"published\": \"2017-01-26T04:58:31Z\",\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<username, in base64>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"objectType\": \"<room/private>\",\n        \"id\": \"<user ID to send to or UUID of room to send to>\",\n        \"displayName\": \"<the name of the user/room to send to, in base64>\"\n    },\n    \"object\": {\n        \"content\": \"<the body to send, in base64>\"\n    }\n}\n\n\n\n\nUser ID parameter\n\n\nThe \n/banned\n endpoint supports having a json with user ID's in the request body to only get bans for those users. E.g.:\n\n\ncurl localhost:5400/banned -d '{\"users\":[\"110464\"]}' -X GET -H \"Content-Type: application/json\"\n\n\n\nResponse would be (slightly different from above example without request body):\n\n\n{\n    \"data\": {\n        \"110464\": {\n            \"channel\": {},\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                    \"name\": \"Y29vbCBndXlz\",\n                    \"duration\": \"15m\",\n                    \"timestamp\": \"2016-12-14T09:23:00Z\"\n                },\n                \"675eb2a5-17c6-45e4-bc0f-674241573f22\": {\n                    \"name\": \"YmFkIGtpZHo=\",\n                    \"duration\": \"2m\",\n                    \"timestamp\": \"2016-12-14T09:15:51Z\"\n                }\n            },\n            \"global\": {}\n        }\n    },\n    \"status_code\": 200\n}",
            "title": "REST API"
        },
        {
            "location": "/md/rest/#get-acl",
            "text": "Retrieve all ACLs for all non-temporary rooms in all channels.  Example response:  {\n    \"data\": {\n        \"status\": \"OK\",\n        \"data\": {\n            \"0efd8a52-7220-4160-88fe-68a15d470d95\": [{\n                \"type\": \"admin\",\n                \"action\": \"join\",\n                \"value\": \"\"\n            }, {\n                \"type\": \"admin\",\n                \"action\": \"list\",\n                \"value\": \"\"\n            }],\n            \"a81e4726-784a-11e9-bbdd-bbfdfd886868\": [{\n                \"type\": \"gender\",\n                \"action\": \"autojoin\",\n                \"value\": \"m,f\"\n            }]\n        }\n    },\n    \"status_code\": 200\n}",
            "title": "GET /acl"
        },
        {
            "location": "/md/rest/#post-acl",
            "text": "Request:  {\n    \"room_id\": \"a81e4726-784a-11e9-bbdd-bbfdfd886868\",\n    \"action\": \"autojoin\",\n    \"acl_type\": \"gender\",\n    \"acl_value\": \"age=35,(gender=f|membership=normal)\"\n}  For more examples on the format of the  acl_value  field, see the  ACL  section.   Response:  {\n    \"data\": {\n        \"status\": \"OK\"\n    }, \n    \"status_code\": 200\n}",
            "title": "POST /acl"
        },
        {
            "location": "/md/rest/#get-history",
            "text": "Request contains info on what time slice, target, origin to get history for:      {\n        \"from_time\": \"2016-12-26T08:39:54Z\",\n        \"to_time\": \"2016-12-28T08:39:54Z\",\n        \"user_id\": \"124352\",\n        \"room_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\" # optional\n    }  Response would be something similar to the following:      {\n        \"status_code\": 200,\n        \"data\": [{\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:33Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"37db81f2-4e16-4076-b759-8ce1c23a364e\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"aG93IGFyZSB5b3U/\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }, {\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:31Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"416d3c60-7197-471c-a706-7dbeca090d11\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"aGVsbG8gdGhlcmU=\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }, {\n            \"deleted\": false,\n            \"target_name\": \"YmFkIGtpZHo=\",\n            \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n            \"timestamp\": \"2017-01-26T04:58:16Z\",\n            \"from_user_name\": \"YmF0bWFu\",\n            \"message_id\": \"91655457-3712-4c2f-b6f2-c3b0f8be29e5\",\n            \"from_user_id\": \"997110\",\n            \"channel_name\": \"U2hhbmdoYWk=\",\n            \"body\": \"ZmRzYQ==\",\n            \"domain\": \"room\",\n            \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n        }]\n    }   If neither  from_time  nor  to_time  is specified, the last 7 days will be used as limit,  If  from_time  is specified but no  to_time ,  to_time  will be  from_time + 7 days ,  If  to_time  is specified but no  from_time ,  from_time  will be  to_time - 7 days ,  Either  user_id  or  room_id  is required (both can be specified at the same time),  to_time  needs to be after  from_time .",
            "title": "GET /history"
        },
        {
            "location": "/md/rest/#post-heartbeat",
            "text": "For mobile clients, it is sometimes tricky to maintain a constant connection due to fluctuations in network quality \nand data loss. To keep a user in an online state without keeping a connection open, the  /heartbeat  api can be used\ninstead.  With regular  /heartbeat  calls, a user will not be marked as offline until no more heartbeats are being received.  Multiple user IDs can be batched together into a single  /heartbeat  call.  Request:  [\n    \"<user ID 1>\",\n    \"<user ID 2>\",\n    \"<user ID n>\"\n]  Response:  {\n    \"data\": {\n        \"status\": \"OK\"\n    }, \n    \"status_code\": 200\n}",
            "title": "POST /heartbeat"
        },
        {
            "location": "/md/rest/#post-full-history",
            "text": "To get all messages sent by a user, call this endpoint with the following data:  {\n    \"user_id\": 1971\n    \"from_time\": \"2016-12-26T08:39:54Z\", # optional (other needed if this one is specified)\n    \"to_time\": \"2016-12-28T08:39:54Z\" # optional  (other needed if this one is specified)\n}  Response looks like this:  {\n    \"status_code\": 200,\n    \"data\": [{\n        \"message_id\": \"07bacdd8-42e6-4ace-acee-8d200dd14bfc\",\n        \"from_user_id\": \"1971\",\n        \"from_user_name\": \"Um9k=\",\n        \"target_id\": \"7935a673-da64-4419-818b-e6e0d1864b61\",\n        \"target_name\": \"TG9iYnk=\",\n        \"body\": \"eyJtYXNrIjoiMDAiLCJ6IjE2IiwidGV4dCI6ImkgYW0gaW52aXNpYmxlIn0=\",\n        \"domain\": \"room\",\n        \"channel_id\": \"84ec4b4f-7482-48ba-83a1-9c9b1c470903\",\n        \"channel_name\": \"UGVu\",\n        \"timestamp\": \"2017-05-23T07:32:07Z\",\n        \"deleted\": true\n    }, {...}]\n}",
            "title": "POST /full-history"
        },
        {
            "location": "/md/rest/#post-broadcast",
            "text": "Broadcasts a message to everyone on the server. Request needs the  body  and  verb  keys:  {\n    \"body\": \"aGkgdGhlcmU=\",\n    \"verb\": \"broadcast\"\n}  Body needs to be in base64. The verb may be anything, it's up to clients to handle it.",
            "title": "POST /broadcast"
        },
        {
            "location": "/md/rest/#post-blacklist",
            "text": "Add a new word to the blacklist. Encode the word in base64 first, then post a request on the following format:  {\n    \"word\": \"YmFkd29yZA==\"\n}  Response if OK:  {\n    \"status_code\": 200\n}",
            "title": "POST /blacklist"
        },
        {
            "location": "/md/rest/#delete-blacklist",
            "text": "Remove a matching word from the blacklist. Encode the word in base64 first, then post a request on the following format:  {\n    \"word\": \"YmFkd29yZA==\"\n}  The sent word will be compared lowercase to find  matching lowercased word in the blacklist and remove all words with\nand exact match (when both lowercase).  Response if OK:  {\n    \"status_code\": 200\n}",
            "title": "DELETE /blacklist"
        },
        {
            "location": "/md/rest/#post-set-admin",
            "text": "Set a user as a global moderator.  Request contains user ID and the user's name (in case the user doesn't exist):  {\n    \"id\": \"1234\",\n    \"name\": \"myuser\"\n}  Response if OK:  {\n    \"status_code\": 200\n}  Or if any errors:  {\n    \"data\": \"no name parameter in request\", \n    \"status_code\": 500\n}",
            "title": "POST /set-admin"
        },
        {
            "location": "/md/rest/#post-remove-admin",
            "text": "Remove global moderator status for a user.  Request contains the user's ID only:  {\n    \"id\": \"1234\"\n}  Response if OK:  {\n    \"status_code\": 200\n}  Or if any errors:  {\n    \"data\": \"no id parameter in request\", \n    \"status_code\": 500\n}",
            "title": "POST /remove-admin"
        },
        {
            "location": "/md/rest/#post-ban",
            "text": "Request contains info on who to ban where. For banning globally:  {\n    \"1234\": {\n        \"duration\": \"24h\",\n        \"reason\": \"<optional base64 encoded free-text>\",\n        \"admin_id\": \"<id of user banning (must already exist), or leave empty for default>\",\n        \"type\": \"global\",\n        \"name\": \"<username in base64, optional>\"\n    }\n}  Can also ban multiple users at the same time:  {\n    \"<user id>\": {\n        \"duration\": \"24h\",\n        \"type\": \"global\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\",\n        \"name\": \"<username in base64, optional>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"10m\",\n        \"target\": \"<channel uuid>\",\n        \"type\": \"channel\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"7d\",\n        \"target\": \"<room uuid>\",\n        \"type\": \"room\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    }\n}  The  name  field must be base64 encoded. The field is also optional and is only used if a ban request is received for \na user that doesn't exist on the server, e.g. if the user never logged in before it will not exist. If the name is \nnot specified and the user has to be created before banning, the user ID will be set as the name (later when the user \nlogin the real username will overwrite this).  The  reason  field must be base64 encoded. If the  admin_id  field is specified it will be used, if not the default ID 0  will be used (the default admin user).  Duration is an integer followed by a char for the unit, which can be one of  d ,  h ,  m ,  s  (days, hours, minutes, \nseconds). Negative or 0 durations are not allowed.  When type is set to  global , no target is specified (meaning user is banned from the whole chat server).  Response will be something like the following (if failure):  {\n    \"status\": \"FAIL\",\n    \"message\": \"missing target id for user id <user id> and request <the request json>\"\n}  The banning is done async so if any of the provided user bans has invalid parameters the response will only tell you the\nfirst non-valid parameter and for which user ID.  For success the response looks like this:  {\n    \"status\": \"OK\"\n}",
            "title": "POST /ban"
        },
        {
            "location": "/md/rest/#post-kick",
            "text": "Request contains:  {\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    }\n}  The \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.  Response will be something like the following:  {\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}",
            "title": "POST /kick"
        },
        {
            "location": "/md/rest/#get-roles",
            "text": "Request contains a list of user IDs, e.g.:  {\n    \"users\": [\n        \"124352\",\n        \"5678\"\n    ]\n}  Response would be something similar to the following:  {\n    \"data\": {\n        \"124352\": {\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": [\n                    \"moderator\"\n                ],\n                \"bb0ea500-cd94-11e6-b178-8323deb605bf\": [\n                    \"owner\"\n                ]\n            },\n            \"channel\": {\n                \"dedf878e-b25d-4713-8058-20c6f0547c59\": [\n                    \"admin\", \n                    \"owner\"\n                ]\n            },\n            \"global\": [\n                \"superuser\",\n                \"globalmod\"\n            ]\n        },\n        \"5678\": {\n            \"room\": {},\n            \"channel\": {},\n            \"global\": []\n        }\n    },\n    \"status_code\": 200\n}  Possible roles are:   global superuser (superuser)  global moderator (globalmod)  channel owner (owner)  channel admin (admin)  room owner (owner)  room moderator (moderator)   The only difference between global superusers and global moderators is that global superusers can also remove static \nrooms.",
            "title": "GET /roles"
        },
        {
            "location": "/md/rest/#get-rooms-for-users",
            "text": "Request contains a list of user IDs, e.g.:  {\n    \"users\": [\n        \"1234\",\n        \"5678\"\n    ]\n}  Response would be all rooms each user is currently in (room names and channel names are base64 encoded):  {\n    \"1234\": [{\n        \"room_id\": \"efeca2fe-ba93-11e6-bc9a-4f6f56293063\",\n        \"room_name\": \"b2gsIHNvIHlvdSBhY3R1YWxseSBjaGVja2VkIHdoYXQgaXMgd2FzPw==\",\n        \"channel_id\": \"fb843140-ba93-11e6-b178-97f0297a6d4d\",\n        \"channel_name\": \"dG9tIGlzIGEgZnJlbmNoIG1hZG1hbg==\"\n    }],\n    \"5678\": [{\n        \"room_id\": \"ca1dc3b4-ba93-11e6-b835-7f1d961023a1\",\n        \"room_name\": \"cmVhZCB1cCBvbiBoeXBlcmxvZ2xvZysr\",\n        \"channel_id\": \"f621fcaa-ba93-11e6-8590-bfe35ff80c03\",\n        \"channel_name\": \"YSByZWRidWxsIGEgZGF5IGtlZXBzIHRoZSBzYW5kbWFuIGF3YXk=\"\n    }]\n}",
            "title": "GET /rooms-for-users"
        },
        {
            "location": "/md/rest/#post-delete-messages",
            "text": "Used to delete ALL messages for a specific user ID.  Request body looks like this:  {\n    \"id\": \"<user ID>\"\n}  Example response:  {\n    \"status_code\": 200, \n    \"data\": {\n        \"success\": 4, \n        \"failed\": 0,\n        \"total\": 4\n    }\n}  Or if other kinds of failures:  {\n    \"status_code\": 500, \n    \"data\": \"<error message, e.g. 'no id parameter in request'>\"\n}",
            "title": "POST /delete-messages"
        },
        {
            "location": "/md/rest/#get-banned",
            "text": "No data required in request.  Response is all banned users, separated by channel, room and globally. Example response:      {\n        \"channels\": {},\n        \"global\": {\n            \"185626\": {\n                \"name\": \"bHVlbA==\",\n                \"duration\": \"1h\",\n                \"timestamp\": \"2016-12-05T03:50:24Z\"\n            }\n        },\n        \"rooms\": {\n            \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                \"name\": \"Y29vbCBndXlz\",\n                \"users\": {\n                    \"101108\": {\n                        \"name\": \"bHVlbA==\",\n                        \"duration\": \"30m\",\n                        \"timestamp\": \"2016-12-05T03:20:24Z\"\n                    }\n                }\n            }\n        }\n    }  The \"timestamp\" in the response is the UTC timestamp for when the ban will expire. Names or channels, rooms and users\nare all base64 encoded. The dictionary keys for \"rooms\" are the UUIDs of the rooms, same for channels, while for users\nit's their user IDs as keys. The bans for \"global\" have no separation by room/channel IDs, and no \"name\" or \"users\" \nkeys.",
            "title": "GET /banned"
        },
        {
            "location": "/md/rest/#post-status",
            "text": "Set the online status or visibility status of a user.  Request contains:  {   \n    \"id\": \"<user ID>\",\n    \"status\": \"<one of online/offline/invisible/visible>\"\n}     Example response:  {\n    \"status_code\": 200\n}",
            "title": "POST /status"
        },
        {
            "location": "/md/rest/#post-send",
            "text": "Request contains:  {   \n    \"id\": \"<user ID>\",\n    \"user_name\": \"<username, in base64>\",\n    \"object_type\": \"<room/private>\",\n    \"target_id\": \"<user ID to send to or UUID of room to send to>\",\n    \"target_name\": \"<the name of the user/room to send to, in base64>\",\n    \"content\": \"<the body to send, in base64>\"\n}     Example response:  {\n    \"status_code\": 200\n}  User/room will get something similar to this in a  message  event:  {\n    \"id\": \"1d805e18-a773-11e8-a65f-8b33c55c9e1b\",\n    \"published\": \"2017-01-26T04:58:31Z\",\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<username, in base64>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"objectType\": \"<room/private>\",\n        \"id\": \"<user ID to send to or UUID of room to send to>\",\n        \"displayName\": \"<the name of the user/room to send to, in base64>\"\n    },\n    \"object\": {\n        \"content\": \"<the body to send, in base64>\"\n    }\n}",
            "title": "POST /send"
        },
        {
            "location": "/md/rest/#user-id-parameter",
            "text": "The  /banned  endpoint supports having a json with user ID's in the request body to only get bans for those users. E.g.:  curl localhost:5400/banned -d '{\"users\":[\"110464\"]}' -X GET -H \"Content-Type: application/json\"  Response would be (slightly different from above example without request body):  {\n    \"data\": {\n        \"110464\": {\n            \"channel\": {},\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                    \"name\": \"Y29vbCBndXlz\",\n                    \"duration\": \"15m\",\n                    \"timestamp\": \"2016-12-14T09:23:00Z\"\n                },\n                \"675eb2a5-17c6-45e4-bc0f-674241573f22\": {\n                    \"name\": \"YmFkIGtpZHo=\",\n                    \"duration\": \"2m\",\n                    \"timestamp\": \"2016-12-14T09:15:51Z\"\n                }\n            },\n            \"global\": {}\n        }\n    },\n    \"status_code\": 200\n}",
            "title": "User ID parameter"
        },
        {
            "location": "/md/wio/",
            "text": "Online status is kept in redis for users who successfully logs in and keeps their socket connection open.\n\n\nFour keys are maintained in redis:\n\n\n\n\nusers:online:bitmap\n\n\nusers:online:set\n\n\nusers:multicast\n\n\nuser:status:\n\n\n\n\nusers:online:bitmap (BITMAP)\n\n\nThe ID of the user is used as the offset in the bitmap. When a user logs in the bit in that offset will be set to 1,\nand when the user's socket closes the bit is set to 0.\n\n\nusers:online:set (SET)\n\n\nA set containing all the IDs of users who are currently online. When a user logs in the user ID is added to the set, and\nwhen the socket closes the ID is removed from the set.\n\n\nWhen a user changes his/her status to invisible his/her ID will also be removed from this set. \n\n\nusers:multicast (SET)\n\n\nSame as \nusers:online:set\n, except that when a user goes invisible the user ID stays in this set. This allows \nmulticasting of notifications without showing up as \nonline\n.\n\n\nuser:status:USER_ID (STRING)\n\n\nOne key for each user containing the status, which is a single character with the following meaning:\n\n\n\n\n1: available (online)\n\n\n2: chatting (not currently used)\n\n\n3: invisible\n\n\n4: unavailable (offline)\n\n\n5: unknown",
            "title": "Who Is Online?"
        },
        {
            "location": "/md/wio/#usersonlinebitmap-bitmap",
            "text": "The ID of the user is used as the offset in the bitmap. When a user logs in the bit in that offset will be set to 1,\nand when the user's socket closes the bit is set to 0.",
            "title": "users:online:bitmap (BITMAP)"
        },
        {
            "location": "/md/wio/#usersonlineset-set",
            "text": "A set containing all the IDs of users who are currently online. When a user logs in the user ID is added to the set, and\nwhen the socket closes the ID is removed from the set.  When a user changes his/her status to invisible his/her ID will also be removed from this set.",
            "title": "users:online:set (SET)"
        },
        {
            "location": "/md/wio/#usersmulticast-set",
            "text": "Same as  users:online:set , except that when a user goes invisible the user ID stays in this set. This allows \nmulticasting of notifications without showing up as  online .",
            "title": "users:multicast (SET)"
        },
        {
            "location": "/md/wio/#userstatususer_id-string",
            "text": "One key for each user containing the status, which is a single character with the following meaning:   1: available (online)  2: chatting (not currently used)  3: invisible  4: unavailable (offline)  5: unknown",
            "title": "user:status:USER_ID (STRING)"
        },
        {
            "location": "/md/storage/",
            "text": "Storage\n\n\nAll events can be stored in four different storage types:\n\n\n\n\nCassandra,\n\n\nRiak,\n\n\nRedis,\n\n\nAny RDBMS supported by SqlAlchemy.\n\n\n\n\nCassandra\n\n\n\"The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data.Cassandra's support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages.\"\n\n\nRiak KV\n\n\nRiak KV with LevelDB backend.\n\n\n\"Riak KV is a distributed NoSQL key-value database with advanced local and multi-cluster replication that guarantees reads and writes even in the event of hardware failures or network partitions.\"\n\n\nRedis\n\n\n\"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.\"\n\n\nSqlAlchemy\n\n\nThe following dialects are supports out-of-the-box by SqlAlchemy:\n\n\n\n\nFirebird,\n\n\nMicrosoft SQL Server,\n\n\nMySQL,\n\n\nOracle,\n\n\nPostgreSQL,\n\n\nSQLite,\n\n\nSybase.\n\n\n\n\nExternal production ready dialects:\n\n\n\n\nIBM DB2,\n\n\nAmazon Redshift,\n\n\nEXASolution,\n\n\nSAP Sybase SQL Anywhere,\n\n\nMonetDB,\n\n\nSnowflake,\n\n\nCrateDB.",
            "title": "Storage"
        },
        {
            "location": "/md/storage/#storage",
            "text": "All events can be stored in four different storage types:   Cassandra,  Riak,  Redis,  Any RDBMS supported by SqlAlchemy.",
            "title": "Storage"
        },
        {
            "location": "/md/storage/#cassandra",
            "text": "\"The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data.Cassandra's support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages.\"",
            "title": "Cassandra"
        },
        {
            "location": "/md/storage/#riak-kv",
            "text": "Riak KV with LevelDB backend.  \"Riak KV is a distributed NoSQL key-value database with advanced local and multi-cluster replication that guarantees reads and writes even in the event of hardware failures or network partitions.\"",
            "title": "Riak KV"
        },
        {
            "location": "/md/storage/#redis",
            "text": "\"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.\"",
            "title": "Redis"
        },
        {
            "location": "/md/storage/#sqlalchemy",
            "text": "The following dialects are supports out-of-the-box by SqlAlchemy:   Firebird,  Microsoft SQL Server,  MySQL,  Oracle,  PostgreSQL,  SQLite,  Sybase.   External production ready dialects:   IBM DB2,  Amazon Redshift,  EXASolution,  SAP Sybase SQL Anywhere,  MonetDB,  Snowflake,  CrateDB.",
            "title": "SqlAlchemy"
        }
    ]
}